/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Oct 17, 2009, 12:40:27 PM
 */

package simplevideoconverter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.TableColumnModel;
/**
 *
 * @author juanki23
 */
public class MainFrame extends javax.swing.JFrame  {
    private String getStrInputFile,getStrVideoRate,getStrAudioRate, getStrFrameRate;
    private FilesTableModel model;
    private File [] files;
    private int columntoblock[]={0,1,5};
    private Process process;
    private int xclicked, yclicked,countTableRow=0,StopProcess=0;
    private File getInputFile,getOutputFile,getMPGFile,getXMLFile,getDVDFolder,getDVDBashFile,getCurrentDir,getMencoderFile,getDVDAuthorFile,getmkisofsFile; //getMPGFile and geetXMLFile is for DVD convert.
    private StreamCleanProcessOutput StreamOutput;
    private StreamCleanProcessError StreamError;
    private boolean pauseresume=false;

    public MainFrame() {
        initComponents();
        super.setLocationRelativeTo(this);
        model = new FilesTableModel();
        jTableFiles.setModel(model);
        model.SetColumnToBlock(columntoblock);
        if(System.getProperty("os.name").equals("Windows")){
          getMencoderFile=new File(getCurrentDir.getAbsolutePath()+"/bin/mencoder.exe");
          getDVDAuthorFile=new File(getCurrentDir.getAbsolutePath()+"/bin/dvdauthor.exe");
          getmkisofsFile=new File(getCurrentDir.getAbsolutePath()+"/bin/mkisofs/mkisofs.exe");
          JOptionPane.showMessageDialog(this, "Estas en Windows");
        }
        try{
            UIManager.setLookAndFeel(new org.jvnet.substance.skin.SubstanceMistSilverLookAndFeel());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (UnsupportedLookAndFeelException ex) {}
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        JPanelBase = new javax.swing.JPanel();
        jPanelContainer = new javax.swing.JPanel();
        jLayeredPaneInput = new javax.swing.JLayeredPane();
        jlblInput = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFiles = new javax.swing.JTable();
        jbtnAddFiles = new javax.swing.JButton();
        jbtnRemove = new javax.swing.JButton();
        jbtnRemoveAll = new javax.swing.JButton();
        jbtnDown = new javax.swing.JButton();
        jbtnUp = new javax.swing.JButton();
        jLayeredPaneOutput = new javax.swing.JLayeredPane();
        jbtnPauseResume = new javax.swing.JButton();
        jbtnStartProcess = new javax.swing.JButton();
        jcbOutput = new javax.swing.JComboBox();
        jlblOutput = new javax.swing.JLabel();
        jbtnStopAndHold = new javax.swing.JButton();
        jbtnStopAndDelete = new javax.swing.JButton();
        jlblDetails = new javax.swing.JLabel();
        jlblOutputFolder = new javax.swing.JLabel();
        jlblOutputFormat1 = new javax.swing.JLabel();
        jtxtOutput = new javax.swing.JTextField();
        jbtnOutput = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuExit = new javax.swing.JMenu();
        jMenuAbout = new javax.swing.JMenu();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Video Converter 1.5");
        setBackground(new java.awt.Color(228, 233, 238));
        setName("frmSVC"); // NOI18N
        setResizable(false);

        JPanelBase.setBackground(new java.awt.Color(228, 233, 238));
        JPanelBase.setLayout(new java.awt.GridBagLayout());

        jPanelContainer.setBackground(new java.awt.Color(228, 233, 238));
        jPanelContainer.setOpaque(false);
        jPanelContainer.setPreferredSize(new java.awt.Dimension(700, 450));

        jLayeredPaneInput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jlblInput.setFont(new java.awt.Font("Arial Black", 1, 14));
        jlblInput.setForeground(new java.awt.Color(54, 54, 54));
        jlblInput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblInput.setText("<html><u>INPUT</i><html>");
        jlblInput.setBounds(10, 3, 680, 20);
        jLayeredPaneInput.add(jlblInput, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTableFiles.setAutoCreateRowSorter(true);
        jTableFiles.setBackground(new java.awt.Color(254, 255, 254));
        jTableFiles.setForeground(new java.awt.Color(6, 45, 2));
        jTableFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableFiles.setFillsViewportHeight(true);
        jTableFiles.setGridColor(new java.awt.Color(254, 254, 254));
        jTableFiles.setSelectionBackground(new java.awt.Color(240, 240, 240));
        jTableFiles.setSelectionForeground(new java.awt.Color(254, 254, 254));
        jTableFiles.getTableHeader().setReorderingAllowed(false);
        jTableFiles.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFilesMouseClicked(evt);
            }
        });
        jTableFiles.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTableFilesMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(jTableFiles);

        jScrollPane1.setBounds(50, 70, 630, 130);
        jLayeredPaneInput.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnAddFiles.setFont(new java.awt.Font("Arial Black", 0, 10)); // NOI18N
        jbtnAddFiles.setText("ADD FILES");
        jbtnAddFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddFilesActionPerformed(evt);
            }
        });
        jbtnAddFiles.setBounds(50, 30, 110, 31);
        jLayeredPaneInput.add(jbtnAddFiles, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnRemove.setFont(new java.awt.Font("Arial Black", 0, 10)); // NOI18N
        jbtnRemove.setText("REMOVE FILE");
        jbtnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoveActionPerformed(evt);
            }
        });
        jbtnRemove.setBounds(170, 30, 110, 31);
        jLayeredPaneInput.add(jbtnRemove, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnRemoveAll.setFont(new java.awt.Font("Arial Black", 0, 10));
        jbtnRemoveAll.setText("REMOVE ALL");
        jbtnRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoveAllActionPerformed(evt);
            }
        });
        jbtnRemoveAll.setBounds(290, 30, 110, 31);
        jLayeredPaneInput.add(jbtnRemoveAll, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/down.png"))); // NOI18N
        jbtnDown.setBorderPainted(false);
        jbtnDown.setContentAreaFilled(false);
        jbtnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDownActionPerformed(evt);
            }
        });
        jbtnDown.setBounds(10, 130, 40, 40);
        jLayeredPaneInput.add(jbtnDown, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up.png"))); // NOI18N
        jbtnUp.setBorderPainted(false);
        jbtnUp.setContentAreaFilled(false);
        jbtnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpActionPerformed(evt);
            }
        });
        jbtnUp.setBounds(10, 90, 40, 40);
        jLayeredPaneInput.add(jbtnUp, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPaneOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jbtnPauseResume.setBackground(new java.awt.Color(96, 95, 93));
        jbtnPauseResume.setFont(new java.awt.Font("Arial Black", 1, 10));
        jbtnPauseResume.setText("PAUSE");
        jbtnPauseResume.setBorder(null);
        jbtnPauseResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPauseResumeActionPerformed(evt);
            }
        });
        jbtnPauseResume.setBounds(130, 130, 110, 40);
        jLayeredPaneOutput.add(jbtnPauseResume, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnStartProcess.setFont(new java.awt.Font("Arial Black", 1, 10)); // NOI18N
        jbtnStartProcess.setText("START");
        jbtnStartProcess.setToolTipText("The output files have the name of input file plus Datetime.");
        jbtnStartProcess.setActionCommand("Save");
        jbtnStartProcess.setBorder(null);
        jbtnStartProcess.setVerifyInputWhenFocusTarget(false);
        jbtnStartProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStartProcessActionPerformed(evt);
            }
        });
        jbtnStartProcess.setBounds(10, 130, 110, 40);
        jLayeredPaneOutput.add(jbtnStartProcess, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jcbOutput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AVI (DivX5)", "DVD (ISO)", "AVI (XVID)", "MP4 (H264)" }));
        jcbOutput.setBounds(140, 40, 160, 23);
        jLayeredPaneOutput.add(jcbOutput, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jlblOutput.setFont(new java.awt.Font("Arial Black", 1, 14));
        jlblOutput.setForeground(new java.awt.Color(54, 54, 54));
        jlblOutput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblOutput.setLabelFor(jcbOutput);
        jlblOutput.setText("<html><u>OUTPUT</i><html>");
        jlblOutput.setBounds(10, 10, 680, 20);
        jLayeredPaneOutput.add(jlblOutput, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnStopAndHold.setFont(new java.awt.Font("Arial Black", 0, 10)); // NOI18N
        jbtnStopAndHold.setText("<HTML><DIV ALIGN=\"CENTER\">STOP AND HOLD OUTPUT FILE</DIV></HTML>\n");
        jbtnStopAndHold.setToolTipText("  It's retrieve an Output File. Use when you need a part of processing video in the Output.");
        jbtnStopAndHold.setBorder(null);
        jbtnStopAndHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStopAndHoldActionPerformed(evt);
            }
        });
        jbtnStopAndHold.setBounds(390, 130, 120, 40);
        jLayeredPaneOutput.add(jbtnStopAndHold, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnStopAndDelete.setFont(new java.awt.Font("Arial Black", 0, 10)); // NOI18N
        jbtnStopAndDelete.setText("<HTML><DIV ALIGN=\"CENTER\">STOP AND DELETE OUTPUT FILE</DIV></HTML>\n");
        jbtnStopAndDelete.setToolTipText(" It's delete Output File.  Use when you don't need a part of processing video in the Output.");
        jbtnStopAndDelete.setBorder(null);
        jbtnStopAndDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStopAndDeleteActionPerformed(evt);
            }
        });
        jbtnStopAndDelete.setBounds(250, 130, 130, 40);
        jLayeredPaneOutput.add(jbtnStopAndDelete, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jlblDetails.setBackground(new java.awt.Color(254, 254, 254));
        jlblDetails.setFont(new java.awt.Font("SansSerif", 0, 10));
        jlblDetails.setForeground(new java.awt.Color(1, 1, 1));
        jlblDetails.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblDetails.setText("Output Details");
        jlblDetails.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jlblDetails.setOpaque(true);
        jlblDetails.setBounds(10, 185, 680, 30);
        jLayeredPaneOutput.add(jlblDetails, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jlblOutputFolder.setFont(new java.awt.Font("Arial Black", 0, 11));
        jlblOutputFolder.setText("OUTPUT FOLDER:");
        jlblOutputFolder.setBounds(20, 70, 110, 40);
        jLayeredPaneOutput.add(jlblOutputFolder, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jlblOutputFormat1.setFont(new java.awt.Font("Arial Black", 0, 11));
        jlblOutputFormat1.setText("VIDEO FORMAT:");
        jlblOutputFormat1.setBounds(20, 30, 110, 40);
        jLayeredPaneOutput.add(jlblOutputFormat1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jtxtOutput.setBounds(140, 80, 220, 23);
        jLayeredPaneOutput.add(jtxtOutput, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jbtnOutput.setFont(new java.awt.Font("Arial Black", 0, 10)); // NOI18N
        jbtnOutput.setText("BROWSER");
        jbtnOutput.setToolTipText("Search an Output Folder");
        jbtnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnOutputActionPerformed(evt);
            }
        });
        jbtnOutput.setBounds(380, 75, 90, 30);
        jLayeredPaneOutput.add(jbtnOutput, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanelContainerLayout = new javax.swing.GroupLayout(jPanelContainer);
        jPanelContainer.setLayout(jPanelContainerLayout);
        jPanelContainerLayout.setHorizontalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPaneInput, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addComponent(jLayeredPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        jPanelContainerLayout.setVerticalGroup(
            jPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPaneInput, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
        );

        JPanelBase.add(jPanelContainer, new java.awt.GridBagConstraints());

        jMenuBar1.setBackground(new java.awt.Color(228, 233, 238));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(120, 35));
        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuBar1MousePressed(evt);
            }
        });
        jMenuBar1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseDragged(evt);
            }
        });

        jMenuExit.setText("Exit");
        jMenuExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuExitMousePressed(evt);
            }
        });
        jMenuBar1.add(jMenuExit);

        jMenuAbout.setText("About");
        jMenuAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuAboutMousePressed(evt);
            }
        });
        jMenuBar1.add(jMenuAbout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanelBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(JPanelBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents                       
    private void jbtnStartProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStartProcessActionPerformed
       if(jTableFiles.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Please add video files");
            return;
       }
       if (process==null){
            String strdvdfolder;
            strdvdfolder = jtxtOutput.getText() + "/.DVDOutput/";
            getDVDFolder=new File(strdvdfolder);
            if (getDVDFolder.exists()==true){
                deleteDir(getDVDFolder);
            }
            jlblDetails.setText("Process Status:");
            DecodeVideo();
      }else{
           JOptionPane.showMessageDialog(this, "Please wait until it process finishes");
      }
    }//GEN-LAST:event_jbtnStartProcessActionPerformed
    private void jbtnPauseResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPauseResumeActionPerformed
        if(process!=null){
            if(pauseresume==false){
                jbtnPauseResume.setText("RESUME");
                StreamError.pauseProcess();
                StreamOutput.pauseProcess();
            }else{
                jbtnPauseResume.setText("PAUSE");
                StreamError.resumeProcess();
                StreamOutput.resumeProcess();
            }
        }else{
            JOptionPane.showMessageDialog(this, "You are not processing any video");
        }
    }//GEN-LAST:event_jbtnPauseResumeActionPerformed
    private void jMenuBar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MousePressed
        xclicked=evt.getX();
        yclicked=evt.getY();
    }//GEN-LAST:event_jMenuBar1MousePressed
    private void jMenuBar1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseDragged
        super.setLocation(evt.getXOnScreen()-xclicked, evt.getYOnScreen()-yclicked);
    }//GEN-LAST:event_jMenuBar1MouseDragged
    private void jMenuAboutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuAboutMousePressed
        new jfrmAbout().setVisible(true);
    }//GEN-LAST:event_jMenuAboutMousePressed
    private void jMenuExitMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuExitMousePressed
        System.exit(0);
    }//GEN-LAST:event_jMenuExitMousePressed
    private void jbtnAddFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddFilesActionPerformed
        String [] AudioRates={"128", "192", "224", "256", "288", "320"};
        String [] frameRates={"NTSC - 29.97", "PAL - 25"};
        JFileChooser fcInput = new JFileChooser();
        fcInput.setFileFilter(new VideoFileFilter());
        fcInput.setMultiSelectionEnabled(true);
        int status = fcInput.showOpenDialog(null);
        if (status==0){
            files= fcInput.getSelectedFiles();
            model.AddFiles(files);
            TableColumnModel TableColumns= jTableFiles.getColumnModel();
            JComboBox jcbAudioRate = new JComboBox(AudioRates);
            JComboBox jcbFrameRate = new JComboBox(frameRates);
            TableColumns.getColumn(3).setCellEditor(new DefaultCellEditor(jcbAudioRate));
            TableColumns.getColumn(4).setCellEditor(new DefaultCellEditor(jcbFrameRate));
            jTableFiles.setFillsViewportHeight(true);
             RefineTable();
            jtxtOutput.setText(fcInput.getCurrentDirectory().toString());
            for (int c=0;c<model.getRowCount();c++){
                if (model.getValueAt(c, 0).toString().endsWith(".wmv")){
                    model.SetCellToBlock(c, 3);
                }
            }   
         }
    }//GEN-LAST:event_jbtnAddFilesActionPerformed
    private void jbtnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoveActionPerformed
        if(jTableFiles.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this, "You need to select a file.");
        }else{
            model.removeRow(jTableFiles.getSelectedRow());
        }
}//GEN-LAST:event_jbtnRemoveActionPerformed
    private void jbtnRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoveAllActionPerformed
        if(jTableFiles.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Table don't have any file.");
        }else{
            model=null;
            model = new FilesTableModel();
            jTableFiles.setModel(model);       
        }
}//GEN-LAST:event_jbtnRemoveAllActionPerformed
    @SuppressWarnings("static-access")
    private void jbtnStopAndHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStopAndHoldActionPerformed
        if (process!=null){
          try {
            jbtnPauseResume.setText("PAUSE");
            StreamError.resumeProcess();
            StreamOutput.resumeProcess();
            StreamError.sleep(100);
            StreamOutput.sleep(100);
            jlblDetails.setText("Process is stopped...");
            if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                if(getDVDFolder.exists()){
                    deleteDir(getDVDFolder);
                }
                if(getDVDBashFile.exists()){
                    getDVDBashFile.delete();
                }
                if(getXMLFile.exists()){
                    getXMLFile.delete();
                }
                if(getMPGFile.exists()){
                    getMPGFile.delete();
                }
            }
            StopProcess=1;
            process.destroy();
            process=null;
            model.setValueAt("Stopped...", countTableRow, 5);
            countTableRow=countTableRow+1;
            DecodeVideo();
          }catch (InterruptedException ex) {}
         }else{
          JOptionPane.showMessageDialog(this, "You are not processing any video");
         }
    }//GEN-LAST:event_jbtnStopAndHoldActionPerformed
    @SuppressWarnings("static-access")
    private void jbtnStopAndDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStopAndDeleteActionPerformed
      if (process!=null){   
        try {
            jbtnPauseResume.setText("PAUSE");
            StreamError.resumeProcess();
            StreamOutput.resumeProcess();
            StreamError.sleep(100);
            StreamOutput.sleep(100);
            if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                if(getDVDFolder.exists()){
                    deleteDir(getDVDFolder);
                }
                if(getDVDBashFile.exists()){
                    getDVDBashFile.delete();
                }
                if(getXMLFile.exists()){
                    getXMLFile.delete();
                }
                if(getMPGFile.exists()){
                    getMPGFile.delete();
                }
            }
            getOutputFile.delete();
            StopProcess=1;
            process.destroy();
            process=null;
            model.setValueAt("Stopped...", countTableRow, 5);
            countTableRow=countTableRow+1;
            DecodeVideo();
            jlblDetails.setText("Process is stopped...");
         }catch (InterruptedException ex) {}
       }else{
          JOptionPane.showMessageDialog(this, "You are not processing any video");
       }
    }//GEN-LAST:event_jbtnStopAndDeleteActionPerformed
    @SuppressWarnings("static-access")
    private void jbtnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnOutputActionPerformed
        JFileChooser fcOutput = new JFileChooser();
        fcOutput.setCurrentDirectory(getInputFile);
        fcOutput.setFileSelectionMode(fcOutput.DIRECTORIES_ONLY);
        int status = fcOutput.showOpenDialog(null);
        if(status==0){
            File file =fcOutput.getSelectedFile();
            getInputFile=file;
            jtxtOutput.setText(file.getPath());
        }
    }//GEN-LAST:event_jbtnOutputActionPerformed
    private void jTableFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilesMouseClicked
       if(jTableFiles.getRowCount()>0){
         if(jTableFiles.getSelectedRow()>-1){
            String getFileName=(String) model.getValueAt(jTableFiles.getSelectedRow(), 0);
            if(getFileName.endsWith(".wmv")){
                if(model.getValueAt(jTableFiles.getSelectedRow(),  jTableFiles.getSelectedColumn()).equals("128")){
                    JOptionPane.showMessageDialog(this, "WMV file don't accept more than 128 audio bitrate.");
                }
             }
          }
        }
       
    }//GEN-LAST:event_jTableFilesMouseClicked
    private void jbtnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpActionPerformed
        if(jTableFiles.getSelectedRow()>0){
           model.moveRow(jTableFiles.getSelectedRow(),jTableFiles.getSelectedRow(),jTableFiles.getSelectedRow()-1);
           jTableFiles.setRowSelectionInterval(jTableFiles.getSelectedRow()-1, jTableFiles.getSelectedRow()-1);
        }
    }//GEN-LAST:event_jbtnUpActionPerformed
    private void jTableFilesMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilesMouseMoved
       if(jTableFiles.getSelectedRow()>-1){
          jTableFiles.setToolTipText(files[jTableFiles.getSelectedRow()].getPath());
         
       }
    }//GEN-LAST:event_jTableFilesMouseMoved
    private void jbtnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDownActionPerformed
        if(jTableFiles.getSelectedRow()<jTableFiles.getRowCount()-1){
           model.moveRow(jTableFiles.getSelectedRow(),jTableFiles.getSelectedRow(),jTableFiles.getSelectedRow()+1);
           jTableFiles.setRowSelectionInterval(jTableFiles.getSelectedRow()+1, jTableFiles.getSelectedRow()+1);
        }
    }//GEN-LAST:event_jbtnDownActionPerformed
    private void RefineTable(){
        jTableFiles.getColumnModel().getColumn(0).setPreferredWidth(200);
        jTableFiles.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTableFiles.getColumnModel().getColumn(2).setPreferredWidth(70);
        jTableFiles.getColumnModel().getColumn(3).setPreferredWidth(70);
        jTableFiles.getColumnModel().getColumn(4).setPreferredWidth(70);
        jTableFiles.setRowHeight(20);
    }
    private void SetOutputFileLinux(){
             File ReplacedInputFormatFile=new File(ReplaceFormat(model.getValueAt(countTableRow, 0).toString()));
             if ((jcbOutput.getSelectedItem().equals("AVI (DivX5)") ||jcbOutput.getSelectedItem().equals("AVI (XVID)"))){
                getOutputFile=new File(jtxtOutput.getText()+"/"+ReplacedInputFormatFile.getName()+ getDateTime()+".avi");
             }else if (jcbOutput.getSelectedItem().equals("MP4 (H264)")){
                  getOutputFile=new File(jtxtOutput.getText()+"/"+ReplacedInputFormatFile.getName()+ getDateTime()+".mp4");
             }else if (jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                  getOutputFile=new File(jtxtOutput.getText()+"/"+ReplacedInputFormatFile.getName()+ getDateTime()+".iso");
             }
    }
    private void SetOutputFileWindows(){
             File ReplacedInputFormatFile=new File(ReplaceFormat(model.getValueAt(countTableRow, 0).toString()));
             if ((jcbOutput.getSelectedItem().equals("AVI (DivX5)") ||jcbOutput.getSelectedItem().equals("AVI (XVID)"))){
                getOutputFile=new File(jtxtOutput.getText()+"\""+ReplacedInputFormatFile.getName()+ getDateTime()+".avi");
             }else if (jcbOutput.getSelectedItem().equals("MP4 (H264)")){
                  getOutputFile=new File(jtxtOutput.getText()+"\""+ReplacedInputFormatFile.getName()+ getDateTime()+".mp4");
             }else if (jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                  getOutputFile=new File(jtxtOutput.getText()+"\""+ReplacedInputFormatFile.getName()+ getDateTime()+".iso");
             }
    }
    private void DecodeVideo(){
        if(countTableRow<jTableFiles.getRowCount()){
             getInputFile=new File(model.getValueAt(countTableRow, 0).toString());
             getStrInputFile=getInputFile.getPath();
             getStrVideoRate=model.getValueAt(countTableRow, 2).toString();
             getStrAudioRate=model.getValueAt(countTableRow, 3).toString();
             getStrFrameRate=model.getValueAt(countTableRow, 4).toString();
             Runtime rt = Runtime.getRuntime();
             try {
            //    if (OSName.startsWith("Windows")){
              //       SetOutputFileWindows();
                //     process = rt.exec(SetVideoCodecWindows());
                //}else{
                     SetOutputFileLinux();
                     process = rt.exec(SetVideoCodecLinux());
               // }
                model.setValueAt("Processing...", countTableRow, 5);
                StreamError = new StreamCleanProcessError(process.getErrorStream(), "ERROR");
                StreamOutput = new StreamCleanProcessOutput(process.getInputStream(), "OUTPUT");
                StreamError.start();
                StreamOutput.start();
                if (jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                    if(getDVDBashFile.exists()==true){
                        getDVDBashFile.delete();
                    }
                }
             }catch (IOException ex) {}
          }else{
              countTableRow=0;
        }
     }
    private String [] SetVideoCodecLinux(){
        String strmpg=getInputFile.getPath();
        String [] dvdauthorcodec=null,strIso=null,setcodec=null,setvideocodec=null;
        if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                if (strmpg.endsWith(".rmvb")){
                    strmpg= strmpg.replace(".rmvb", ".mpg");
                }else if (strmpg.endsWith(".avi")){
                    strmpg=  strmpg.replaceAll(".avi",".mpg");
                }else if (strmpg.endsWith(".mp4")){
                    strmpg=strmpg.replaceAll(".mp4", ".mpg");
                }else if (strmpg.endsWith(".mpeg")){
                    strmpg= strmpg.replaceAll(".mpeg", ".mpg");
                }else if (strmpg.endsWith(".vob")){
                    strmpg= strmpg.replaceAll(".vob", ".mpg");
                }else if (strmpg.endsWith(".wmv")){
                    strmpg= strmpg.replaceAll(".wmv", ".mpg");
                }else{
                strmpg=getInputFile.getPath()+".mpg";
                }
        }
        if(getStrFrameRate.equals("NTSC - 29.97")){
             if(jcbOutput.getSelectedItem().equals("AVI (DivX5)")){
                 setcodec = new String[]{"mencoder",getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","30000/1001","-ffourcc","DX50","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("AVI (XVID)")){
                 setcodec = new String[]{"mencoder",getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","30000/1001","-ffourcc","XVID","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("MP4 (H264)")){
                 setcodec = new String[]{"mencoder",getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","x264","-x264encopts","bitrate="+getStrVideoRate,"-ofps","30000/1001","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                 getMPGFile=new File(strmpg);
                 getMPGFile=new File(getMPGFile.getPath().replace(getMPGFile.getName(), "."+getMPGFile.getName()));
                 File WorkingWithFileSpace=new File(getOutputFile.getPath().replace(" ", "\\ "));
                 File WorkingWithInputFileSpace=new File(getInputFile.getPath().replace(" ", "\\ "));
                 File WorkingWithMPGFileSpace=new File(getMPGFile.getPath().replace(" ", "\\ "));
                 String getOutputName= new String(getOutputFile.getName().replace(".iso", ""));
                 getOutputName=getOutputName.replace(" ", "\\ ");
                 CreateDVDXMLLinux();
                 setvideocodec = new String[]{"mencoder",WorkingWithInputFileSpace.getPath(),"-oac","lavc","-ovc","lavc","-of","mpeg","-mpegopts","format=dvd:tsaf","-srate","48000","-af","lavcresample=48000:volnorm","-lavcopts","vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate="+getStrVideoRate+":keyint=18:vstrict=0:acodec=ac3:abitrate="+getStrAudioRate+":aspect=16/9","-ofps","30000/1001","-vf","scale=720:480,harddup","-o",WorkingWithMPGFileSpace.getPath()};
                 dvdauthorcodec=new String[]{"dvdauthor","-o","-t","-x",getXMLFile.getPath().replace(" ", "\\ ")};
                 strIso= new String[]{"mkisofs","-V",getOutputName,"-dvd-video","-v","-o",WorkingWithFileSpace.getPath(),getDVDFolder.getPath().replace(" ", "\\ ")+"/"};
                 CreateDVDBashLinux(setvideocodec,dvdauthorcodec,strIso);
                 setcodec=new String[]{"/bin/sh",getDVDBashFile.getPath()};
             }
         }else{
             if(jcbOutput.getSelectedItem().equals("AVI (DivX5)")){
                 setcodec = new String[]{"mencoder",getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","25","-ffourcc","DX50","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("AVI (XVID)")){
                // setcodec = new String[]{"mencoder",jtxtInput.getText(),"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ jcbAudioRate.getSelectedItem().toString(),"-af","volnorm","-ovc","xvid","-xvidencopts","bitrate="+jtxtVideoRate.getText(),"-ofps","25","-of","avi","-o",getOutputFile.getPath()};
                 setcodec = new String[]{"mencoder",getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","25","-ffourcc","XVID","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("MP4 (H264)")){
                 setcodec = new String[]{"mencoder",getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","x264","-x264encopts","bitrate="+getStrVideoRate,"-ofps","25","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                 File WorkingWithFileSpace=new File(getOutputFile.getPath().replace(" ", "\\ "));
                 File WorkingWithInputFileSpace=new File(getInputFile.getPath().replace(" ", "\\ "));
                 File WorkingWithMPGFileSpace=new File(getMPGFile.getPath().replace(" ", "\\ "));
                 String getOutputName= new String(getOutputFile.getName().replace(".iso", ""));
                 getOutputName=getOutputName.replace(" ", "\\ ");
                 CreateDVDXMLLinux();
                 setvideocodec = new String[]{"mencoder",WorkingWithInputFileSpace.getPath(),"-oac","lavc","-ovc","lavc","-of","mpeg","-mpegopts","format=dvd:tsaf","-srate","48000","-af","lavcresample=48000:volnorm","-lavcopts","vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate="+getStrVideoRate+":keyint=15:vstrict=0:acodec=ac3:abitrate="+getStrAudioRate+":aspect=16/9","-ofps","25","-vf","scale=720:576,harddup","-o",WorkingWithMPGFileSpace.getPath()};
                 dvdauthorcodec=new String[]{"dvdauthor","-o","-t","-x",getXMLFile.getPath().replace(" ", "\\ ")};
                 strIso= new String[]{"mkisofs","-V",getOutputName,"-dvd-video","-v","-o",WorkingWithFileSpace.getPath(),getDVDFolder.getPath().replace(" ", "\\ ")+"/"};
                 CreateDVDBashLinux(setvideocodec,dvdauthorcodec,strIso);
                 setcodec=new String[]{"/bin/sh",getDVDBashFile.getPath()};
             }
          }
            return setcodec;
    }
    private void CreateDVDBashLinux(String [] videocodec, String[] dvdauthorcodec,String[] IsoMaker){
        String videoc="",dvdauthor="",isocreator="";
        for(int c=0;c<videocodec.length;c++){
            videoc=videoc+videocodec[c]+" ";
        }
        for(int c=0;c<dvdauthorcodec.length;c++){
            dvdauthor=dvdauthor+dvdauthorcodec[c]+" ";
        }
        for(int c=0;c<IsoMaker.length;c++){
            isocreator=isocreator + IsoMaker[c]+" ";
        }
        getDVDBashFile=new File(getInputFile.getParent() +"/.dvdcreating");
        try {
                FileWriter fstream = new FileWriter(getDVDBashFile);
                BufferedWriter out = new BufferedWriter(fstream);
                out.write("#/bin/sh\n"+videoc+"\n"+dvdauthor+"\n"+isocreator);
                //Close the output stream
                out.close();
        }catch (IOException ex) {}
    }
    private void CreateDVDXMLLinux(){
        String firsthour="",secondhour="",thirdhour="",chapters="";
        for(int c=0;c<=60;c=c+5){
           if (c<=10){ 
            firsthour=firsthour+"00:0"+c+":00,";
           }else{
            firsthour=firsthour+"00:"+c+":00,";
           }         
         }
        for(int c=0;c<=60;c=c+5){
           if (c<=10){
            secondhour=secondhour+"01:0"+c+":00,";
           }else{
            secondhour=secondhour+"01:"+c+":00,";
           }
         }
        for(int c=0;c<=60;c=c+5){
           if (c<=10){
            secondhour=secondhour+"02:0"+c+":00,";
           }else{
            secondhour=secondhour+"02:"+c+":00,";
           }
        }
        chapters=firsthour+secondhour+thirdhour;
        chapters="'"+chapters.replace("02:60:00,","02:60:00" )+"'";
        getXMLFile=new File(getInputFile.getParent() + "/.dvdauthor.xml");
        try {   
        FileWriter fstream = new FileWriter(getXMLFile.getPath());
                BufferedWriter out = new BufferedWriter(fstream);
                out.write("<dvdauthor dest='"+ getDVDFolder.getPath() +"'>\n<vmgm />\n<titleset>\n" +
                        "<titles>\n<pgc>\n<vob file='"+ getMPGFile.getPath() +
                        "' chapters="+chapters+" />\n</pgc>\n</titles>" +
                        "\n</titleset>\n</dvdauthor>");
                //Close the output stream
                 out.close();
        } catch (IOException ex) {}
    }

    private String [] SetVideoCodecWindows(){
        String strmpg=getInputFile.getPath();
        String [] dvdauthorcodec=null,strIso=null,setcodec=null,setvideocodec=null;
        if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                if (strmpg.endsWith(".rmvb")){
                    strmpg= strmpg.replace(".rmvb", ".mpg");
                }else if (strmpg.endsWith(".avi")){
                    strmpg=  strmpg.replaceAll(".avi",".mpg");
                }else if (strmpg.endsWith(".mp4")){
                    strmpg=strmpg.replaceAll(".mp4", ".mpg");
                }else if (strmpg.endsWith(".mpeg")){
                    strmpg= strmpg.replaceAll(".mpeg", ".mpg");
                }else if (strmpg.endsWith(".vob")){
                    strmpg= strmpg.replaceAll(".vob", ".mpg");
                }else if (strmpg.endsWith(".wmv")){
                    strmpg= strmpg.replaceAll(".wmv", ".mpg");
                }else{
                strmpg=getInputFile.getPath()+".mpg";
                }
                 String hidefile = "C:\\WINDOWS\\System32\\ATTRIB.EXE +H "+  "\""+strmpg+"\"";
                try {
                    Runtime.getRuntime().exec(hidefile);
                } catch (IOException ex) {

                }
        }
        if(getStrFrameRate.equals("NTSC - 29.97")){
             if(jcbOutput.getSelectedItem().equals("AVI (DivX5)")){
                 setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","30000/1001","-ffourcc","DX50","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("AVI (XVID)")){
                 setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","30000/1001","-ffourcc","XVID","-of","avi","-o",getOutputFile.getPath()};
                 //setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","xvid","-xvidencopts","bitrate="+getStrVideoRate,"-ofps","30000/1001","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("MP4 (H264)")){
                 setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","x264","-x264encopts","bitrate="+getStrVideoRate,"-ofps","30000/1001","-o",getOutputFile.getPath()};

             }else if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                 getMPGFile=new File(strmpg);

             //    getMPGFile=new File(getMPGFile.getPath().replace(getMPGFile.getName(), "."+getMPGFile.getName()));
                 String getOutputName= new String(getOutputFile.getName().replace(".iso", ""));
                 CreateDVDXMLWindows();
                 setvideocodec = new String[]{"\""+getMencoderFile.getPath()+"\"","\""+getInputFile.getPath()+"\"","-oac","lavc","-ovc","lavc","-of","mpeg","-mpegopts","format=dvd:tsaf","-srate","48000","-af","lavcresample=48000:volnorm","-lavcopts","vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate="+getStrVideoRate+":keyint=18:vstrict=0:acodec=ac3:abitrate="+getStrAudioRate+":aspect=16/9","-ofps","30000/1001","-vf","scale=720:480,harddup","-o","\""+getMPGFile.getPath()+"\""};
                 dvdauthorcodec=new String[]{"\""+getDVDAuthorFile.getPath()+"\"","-o","-t","-x","\""+getXMLFile.getPath()+"\""};
                 strIso= new String[]{"\""+getmkisofsFile.getPath()+"\"","-V",getOutputName,"-dvd-video","-v","-o","\""+getOutputFile.getPath()+"\"","\""+getDVDFolder.getPath()+"/"+"\""};
                 CreateDVDBashWindows(setvideocodec,dvdauthorcodec,strIso);
                 setcodec=new String[]{getDVDBashFile.getPath()};
             }
        }else{
              if(jcbOutput.getSelectedItem().equals("AVI (DivX5)")){
                 setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","25","-ffourcc","DX50","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("AVI (XVID)")){
                 setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","lavc","-lavcopts","vcodec=mpeg4:vbitrate="+getStrVideoRate,"-ofps","25","-ffourcc","XVID","-of","avi","-o",getOutputFile.getPath()};
                // setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","xvid","-xvidencopts","bitrate="+getStrVideoRate,"-ofps","25","-of","avi","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("MP4 (H264)")){
                 setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","x264","-x264encopts","bitrate="+getStrVideoRate,"-ofps","25","-o",getOutputFile.getPath()};
             }else if(jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                 String getOutputName= new String(getOutputFile.getName().replace(".iso", ""));
                // getOutputName=getOutputName.replace(" ", "\\ ");
                 CreateDVDXMLWindows();
                 setvideocodec = new String[]{"\""+getMencoderFile.getPath()+"\"","\""+getInputFile.getPath()+"\"","-oac","lavc","-ovc","lavc","-of","mpeg","-mpegopts","format=dvd:tsaf","-srate","48000","-af","lavcresample=48000:volnorm","-lavcopts","vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate="+getStrVideoRate+":keyint=15:vstrict=0:acodec=ac3:abitrate="+getStrAudioRate+":aspect=16/9","-ofps","25","-vf","scale=720:576,harddup","-o","\""+getMPGFile.getPath()+"\""};
                 dvdauthorcodec=new String[]{"\""+getDVDAuthorFile.getPath()+"\"","-o","-t","-x","\""+getXMLFile.getPath()+"\""};
                 strIso= new String[]{"\""+getmkisofsFile.getPath()+"\"","-V",getOutputName,"-dvd-video","-v","-o","\""+getOutputFile.getPath()+"\"","\""+getDVDFolder.getPath()+"/"+"\""};
                 CreateDVDBashWindows(setvideocodec,dvdauthorcodec,strIso);
                 setcodec=new String[]{getDVDBashFile.getPath()};
             }
            }
            return setcodec;
    }
    private void CreateDVDBashWindows(String [] videocodec, String[] dvdauthorcodec,String[] IsoMaker){
        String videoc="",dvdauthor="",isocreator="";
        for(int c=0;c<videocodec.length;c++){
            videoc=videoc+videocodec[c]+" ";
        }
         for(int c=0;c<dvdauthorcodec.length;c++){
            dvdauthor=dvdauthor+dvdauthorcodec[c]+" ";
        }
        for(int c=0;c<IsoMaker.length;c++){

            isocreator=isocreator + IsoMaker[c]+" ";
        }
        getDVDBashFile=new File(getInputFile.getParent() +"/dvdcreating.bat");

        try {
        String hidefile = "C:\\WINDOWS\\System32\\ATTRIB.EXE +H "+  "\""+getDVDBashFile.getPath()+"\"";
        Runtime.getRuntime().exec(hidefile);
        FileWriter fstream = new FileWriter(getDVDBashFile);
                BufferedWriter out = new BufferedWriter(fstream);
                out.write(videoc+"\n"+dvdauthor+"\n"+isocreator);
                //Close the output stream
                 out.close();

        } catch (IOException ex) {

        }
    }
    private void CreateDVDXMLWindows(){
        String firsthour="",secondhour="",thirdhour="",chapters="";
        for(int c=0;c<=60;c=c+5){
           if (c<=10){
            firsthour=firsthour+"00:0"+c+":00,";
           }else{
            firsthour=firsthour+"00:"+c+":00,";
           }
        }
        for(int c=0;c<=60;c=c+5){
           if (c<=10){
            secondhour=secondhour+"01:0"+c+":00,";
           }else{
            secondhour=secondhour+"01:"+c+":00,";
           }
        }
         for(int c=0;c<=60;c=c+5){
           if (c<=10){
            secondhour=secondhour+"02:0"+c+":00,";
           }else{
            secondhour=secondhour+"02:"+c+":00,";
           }
         }
        chapters=firsthour+secondhour+thirdhour;
        chapters="'"+chapters.replace("02:60:00,","02:60:00" )+"'";
        getXMLFile=new File(getInputFile.getParent() + "/dvdauthor.xml");
        try {
        String hidefile = "C:\\WINDOWS\\System32\\ATTRIB.EXE +H "+  "\""+getXMLFile.getPath()+"\"";
        Runtime.getRuntime().exec(hidefile);
        FileWriter fstream = new FileWriter(getXMLFile.getPath());
                BufferedWriter out = new BufferedWriter(fstream);

                out.write("<dvdauthor dest='"+ getDVDFolder.getPath() +"'>\n<vmgm />\n<titleset>\n" +
                        "<titles>\n<pgc>\n<vob file='"+ getMPGFile.getPath() +
                        "' chapters="+chapters+" />\n</pgc>\n</titles>" +
                        "\n</titleset>\n</dvdauthor>");
                //Close the output stream
                 out.close();

        } catch (IOException ex) {

        }
    }
    private static boolean deleteDir(File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i=0; i<children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }
        // The directory is now empty so delete it
        return dir.delete();
    }
    private String getDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("_yyyy_MM_dd_HH:mm:ss");
        Date date = new Date();
        return dateFormat.format(date);
    }
    private String ReplaceFormat(String getFilePath){
        if(getFilePath.endsWith(".rmvb")){
             return getFilePath.replace(".rmvb", "");
        }else if(getFilePath.endsWith(".avi")){
           return getFilePath.replace(".avi", "");
        }else if(getFilePath.endsWith(".mkv")){
           return getFilePath.replace(".mkv", "");
        }else if(getFilePath.endsWith(".mp4")){
           return getFilePath.replace(".mp4", "");
        }else if(getFilePath.endsWith(".vob")){
           return getFilePath.replace(".vob", "");
        }else if(getFilePath.endsWith(".mpeg")){
           return getFilePath.replace(".mpeg", "");
        }else if(getFilePath.endsWith(".mpg")){
           return getFilePath.replace(".mpg", "");
        }else if(getFilePath.endsWith(".ogv")){
           return getFilePath.replace(".ogv", "");
        }else if(getFilePath.endsWith(".wmv")){
           return getFilePath.replace(".wmv", "");
        }else{
          return getFilePath;
        }
    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

class StreamCleanProcessOutput extends Thread
{
        InputStream is;
        String type;
        StreamCleanProcessOutput(InputStream is, String type)
        {
            this.is = is;
            this.type = type;           
        }
        public void pauseProcess(){
          pauseresume=true;
        }
        public void resumeProcess(){
          pauseresume=false;
          synchronized(process){
              process.notify();
          }
        }
        @Override
        public void run()
        {
            try {
                  InputStreamReader isr=new InputStreamReader(is);
                  BufferedReader br=new BufferedReader(isr);
                  String line;
                  StopProcess=0;
                  while ((br.readLine())!=null) {
                  
                   if(pauseresume){
                        synchronized(process){
                            try {
                                jlblDetails.setText("Process is Paused...");
                                process.wait();
                          
                            }catch (InterruptedException ex) {}
                        }
                    }
                    jlblDetails.setText("Details: "+ br.readLine());
                }
                if(StopProcess!=1){
                    if (jcbOutput.getSelectedItem().equals("DVD (ISO)")){
                        jlblDetails.setText("Details: DVD Iso process is completed.");
                        deleteDir(getDVDFolder);
                        getXMLFile.delete();
                        getMPGFile.delete();
                        getDVDBashFile.delete();
                    }else{
                        if(pauseresume==false){
                      //  process=null;
                            jlblDetails.setText("Details: Video Process is completed.");
                            model.setValueAt("Completed...", countTableRow, 5);
                            countTableRow=countTableRow+1;
                            DecodeVideo();
                        }
                    }
                }
            }catch (IOException ex) {}
         }
 }
class StreamCleanProcessError extends Thread
{
        InputStream is;
        String type;
        StreamCleanProcessError(InputStream is, String type)
        {
            this.is = is;
            this.type = type;
        }
        public void pauseProcess(){
          pauseresume=true;
        }
        public void resumeProcess(){
          pauseresume=false;
          synchronized(process){
              process.notify();
          }
        }
        @Override
        public void run()
        {

            try {
                  InputStreamReader isr=new InputStreamReader(is);
                  BufferedReader br=new BufferedReader(isr);
                  String line;
                  StopProcess=0;
                while ((br.readLine()) != null) {
                   line = br.readLine();
                   if(pauseresume){
                        synchronized(process){
                            try {
                                jlblDetails.setText("Process is Paused...");
                                process.wait();

                            }catch (InterruptedException ex) {}
                        }
                    }
                 }
              }catch (IOException ex) {
            }
          }
  }
class AVIFilter extends javax.swing.filechooser.FileFilter {
    public boolean accept(File file) {
        String filename = file.getName();
        return filename.endsWith(".avi");
    }
    public String getDescription() {
        return "*.avi";
    }
 }
class MP4Filter extends javax.swing.filechooser.FileFilter {
    public boolean accept(File file) {
        String filename = file.getName();
        return filename.endsWith(".mp4");
    }
    public String getDescription() {
        return "*.mp4";
    }
 }
class DVDFilter extends javax.swing.filechooser.FileFilter {
    public boolean accept(File file) {
        String filename = file.getName();
        return filename.endsWith(".iso");
    }
    public String getDescription() {
        return "*.iso";
    }
 }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanelBase;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLayeredPane jLayeredPaneInput;
    private javax.swing.JLayeredPane jLayeredPaneOutput;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JPanel jPanelContainer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFiles;
    private javax.swing.JButton jbtnAddFiles;
    private javax.swing.JButton jbtnDown;
    private javax.swing.JButton jbtnOutput;
    private javax.swing.JButton jbtnPauseResume;
    private javax.swing.JButton jbtnRemove;
    private javax.swing.JButton jbtnRemoveAll;
    private javax.swing.JButton jbtnStartProcess;
    private javax.swing.JButton jbtnStopAndDelete;
    private javax.swing.JButton jbtnStopAndHold;
    private javax.swing.JButton jbtnUp;
    private javax.swing.JComboBox jcbOutput;
    private javax.swing.JLabel jlblDetails;
    private javax.swing.JLabel jlblInput;
    private javax.swing.JLabel jlblOutput;
    private javax.swing.JLabel jlblOutputFolder;
    private javax.swing.JLabel jlblOutputFormat1;
    private javax.swing.JTextField jtxtOutput;
    // End of variables declaration//GEN-END:variables

}


