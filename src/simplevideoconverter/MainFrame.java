/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * MainFrame.java
 *
 * Created on Dec 17, 2009, 12:20:30 PM
 */
package simplevideoconverter;

import it.sauronsoftware.jave.AudioAttributes;
import it.sauronsoftware.jave.Encoder;
import it.sauronsoftware.jave.EncoderException;
import it.sauronsoftware.jave.EncodingAttributes;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author juanki23
 */
public class MainFrame extends javax.swing.JFrame {

    private String getStrInputFile, getStrVideoRate, getStrAudioRate, getStrFrameRate, getStrDateTime, OSName;
    private String volnormA = "-af", volnormB = "volnorm";
    private FilesTableModel model;
    private File[] files;
    private int columntoblock[] = {0, 1, 8};
    private Process process;
    private int xclicked, yclicked, countTableRow = 0;
    private File filePlay,getInputFile, getOutputFile, getMPGFile, getXMLFile, getDVDFolder, getDVDBashFile, getCurrentDir, getOutputDir, getProgramDir, getMencoderFile, getDVDAuthorFile, getmkisofsFile; //getMPGFile and geetXMLFile is for DVD convert.
    private StreamCleanProcessOutput StreamOutput;
    private StreamCleanProcessError StreamError;
    private StreamCleanProcessAudio StreamAudio;
    private boolean pauseresume = false, holdfile = true;
    private Timer timer;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        super.setLocationRelativeTo(this);
        model = new FilesTableModel();
        jTableFiles.setModel(model);
        jTableFiles.removeColumn(jTableFiles.getColumnModel().getColumn(6));
        jTableFiles.setFillsViewportHeight(true);
        RefineTable();
        model.SetColumnToBlock(columntoblock);
        OSName = System.getProperty("os.name");
        getProgramDir = new File("");

        ReadFromIniFile();
        if (OSName.startsWith("Windows")) {

            getMencoderFile = new File(getProgramDir.getAbsolutePath() + "/bin/mencoder.exe");
            getDVDAuthorFile = new File(getProgramDir.getAbsolutePath() + "/bin/dvdauthor.exe");
            getmkisofsFile = new File(getProgramDir.getAbsolutePath() + "/bin/mkisofs/mkisofs.exe");

            //  JOptionPane.showMessageDialog(this, "Estas en windows");
        }
        try {
            UIManager.setLookAndFeel(new org.jvnet.substance.skin.SubstanceMistSilverLookAndFeel());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (UnsupportedLookAndFeelException ex) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BGroupOutputFormat = new javax.swing.ButtonGroup();
        jLayeredPaneInput = new javax.swing.JLayeredPane();
        jlblInput = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFiles = new javax.swing.JTable();
        jbtnAddFiles = new javax.swing.JButton();
        jbtnRemove = new javax.swing.JButton();
        jbtnRemoveAll = new javax.swing.JButton();
        jbtnPlay = new javax.swing.JButton();
        jbtnUp = new javax.swing.JButton();
        jRbtnMP4 = new javax.swing.JRadioButton();
        jRbtnAviDivx5 = new javax.swing.JRadioButton();
        jRbtnAviXvid = new javax.swing.JRadioButton();
        jRbtnDVD = new javax.swing.JRadioButton();
        jlblSetPredefinedOF = new javax.swing.JLabel();
        jCBoxChangeAllOutputFormat = new javax.swing.JCheckBox();
        jRbtnMP3 = new javax.swing.JRadioButton();
        jRbtnWAV = new javax.swing.JRadioButton();
        jRbtnAC3 = new javax.swing.JRadioButton();
        jRbtnOGG = new javax.swing.JRadioButton();
        jbtnDown = new javax.swing.JButton();
        jLayeredPaneOutput = new javax.swing.JLayeredPane();
        jbtnPauseResume = new javax.swing.JButton();
        jbtnStartProcess = new javax.swing.JButton();
        jlblOutput = new javax.swing.JLabel();
        jbtnStopAndHold = new javax.swing.JButton();
        jbtnStopAndDelete = new javax.swing.JButton();
        jlblDetails = new javax.swing.JLabel();
        jlblOutputFolder = new javax.swing.JLabel();
        jtxtOutput = new javax.swing.JTextField();
        jbtnOutput = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuExit = new javax.swing.JMenu();
        jMenuAbout = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Simple Video Converter 1.5.1");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLayeredPaneInput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jlblInput.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jlblInput.setForeground(new java.awt.Color(54, 54, 54));
        jlblInput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblInput.setText("<html><u>NHẬP VÀO</i><html>");
        jLayeredPaneInput.add(jlblInput);
        jlblInput.setBounds(10, 3, 900, 20);

        jTableFiles.setAutoCreateRowSorter(true);
        jTableFiles.setBackground(new java.awt.Color(254, 255, 254));
        jTableFiles.setForeground(new java.awt.Color(6, 45, 2));
        jTableFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableFiles.setFillsViewportHeight(true);
        jTableFiles.setGridColor(new java.awt.Color(1, 1, 1));
        jTableFiles.setSelectionBackground(new java.awt.Color(240, 240, 240));
        jTableFiles.setSelectionForeground(new java.awt.Color(254, 254, 254));
        jTableFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableFiles.getTableHeader().setReorderingAllowed(false);
        jTableFiles.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTableFilesMouseMoved(evt);
            }
        });
        jTableFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableFilesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableFiles);

        jLayeredPaneInput.add(jScrollPane1);
        jScrollPane1.setBounds(50, 70, 850, 200);

        jbtnAddFiles.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbtnAddFiles.setText("THÊM FILES");
        jbtnAddFiles.setToolTipText("Thêm File tới Bảng. Làm ơn nhấn giữ Shift hoặc Ctrl  đễ chọn nhiều file.");
        jbtnAddFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddFilesActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jbtnAddFiles);
        jbtnAddFiles.setBounds(50, 30, 110, 30);

        jbtnRemove.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbtnRemove.setText("XÓA FILE");
        jbtnRemove.setToolTipText("Chọn một file trong Bảng rồi xóa nó");
        jbtnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoveActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jbtnRemove);
        jbtnRemove.setBounds(170, 30, 110, 30);

        jbtnRemoveAll.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbtnRemoveAll.setText("XÓA TẤT CẢ");
        jbtnRemoveAll.setToolTipText("Xóa tất cả các file trong Bảng");
        jbtnRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoveAllActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jbtnRemoveAll);
        jbtnRemoveAll.setBounds(290, 30, 110, 30);

        jbtnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/play.png"))); // NOI18N
        jbtnPlay.setToolTipText("Di chuyển xuống");
        jbtnPlay.setBorderPainted(false);
        jbtnPlay.setContentAreaFilled(false);
        jbtnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPlayActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jbtnPlay);
        jbtnPlay.setBounds(0, 200, 50, 40);

        jbtnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up.png"))); // NOI18N
        jbtnUp.setToolTipText("Di chuyển lên");
        jbtnUp.setBorderPainted(false);
        jbtnUp.setContentAreaFilled(false);
        jbtnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jbtnUp);
        jbtnUp.setBounds(5, 120, 40, 40);

        BGroupOutputFormat.add(jRbtnMP4);
        jRbtnMP4.setText("MP4 (H264)");
        jRbtnMP4.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnMP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnMP4ActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnMP4);
        jRbtnMP4.setBounds(550, 270, 100, 23);

        BGroupOutputFormat.add(jRbtnAviDivx5);
        jRbtnAviDivx5.setSelected(true);
        jRbtnAviDivx5.setText("AVI (DivX5)");
        jRbtnAviDivx5.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnAviDivx5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnAviDivx5ActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnAviDivx5);
        jRbtnAviDivx5.setBounds(280, 270, 90, 23);

        BGroupOutputFormat.add(jRbtnAviXvid);
        jRbtnAviXvid.setText("AVI (XVID)");
        jRbtnAviXvid.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnAviXvid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnAviXvidActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnAviXvid);
        jRbtnAviXvid.setBounds(370, 270, 90, 23);

        BGroupOutputFormat.add(jRbtnDVD);
        jRbtnDVD.setText("DVD (ISO)");
        jRbtnDVD.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnDVD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnDVDActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnDVD);
        jRbtnDVD.setBounds(460, 270, 90, 23);

        jlblSetPredefinedOF.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlblSetPredefinedOF.setText("THIẾT LẬP ĐỊNH DẠNG XUẤT RA :");
        jlblSetPredefinedOF.setToolTipText("");
        jLayeredPaneInput.add(jlblSetPredefinedOF);
        jlblSetPredefinedOF.setBounds(50, 280, 200, 20);

        jCBoxChangeAllOutputFormat.setText("<HTML><DIV ALIGN=\"LEFT\">Tất cả các file trong bảng trên chuyển đổi cùng một định dạng đã chọn.</DIV></HTML>");
        jCBoxChangeAllOutputFormat.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCBoxChangeAllOutputFormatStateChanged(evt);
            }
        });
        jCBoxChangeAllOutputFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBoxChangeAllOutputFormatActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jCBoxChangeAllOutputFormat);
        jCBoxChangeAllOutputFormat.setBounds(650, 270, 250, 40);

        BGroupOutputFormat.add(jRbtnMP3);
        jRbtnMP3.setText("MP3");
        jRbtnMP3.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnMP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnMP3ActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnMP3);
        jRbtnMP3.setBounds(280, 290, 50, 23);

        BGroupOutputFormat.add(jRbtnWAV);
        jRbtnWAV.setText("WAV");
        jRbtnWAV.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnWAV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnWAVActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnWAV);
        jRbtnWAV.setBounds(370, 290, 60, 23);

        BGroupOutputFormat.add(jRbtnAC3);
        jRbtnAC3.setText("AC3");
        jRbtnAC3.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnAC3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnAC3ActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnAC3);
        jRbtnAC3.setBounds(460, 290, 50, 23);

        BGroupOutputFormat.add(jRbtnOGG);
        jRbtnOGG.setText("OGG");
        jRbtnOGG.setToolTipText("Nếu tùy chọn này được chọn, nó sẽ được lưu dưới định dạng được xác định trước sau khi thoát khỏi chương trình. Cũng được xác định trước như định dạng xuất ra trong bảng sau khi bạn thêm các tập tin mới.");
        jRbtnOGG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbtnOGGActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jRbtnOGG);
        jRbtnOGG.setBounds(550, 290, 60, 23);

        jbtnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/down.png"))); // NOI18N
        jbtnDown.setToolTipText("Di chuyển xuống");
        jbtnDown.setBorderPainted(false);
        jbtnDown.setContentAreaFilled(false);
        jbtnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDownActionPerformed(evt);
            }
        });
        jLayeredPaneInput.add(jbtnDown);
        jbtnDown.setBounds(5, 160, 40, 40);

        jLayeredPaneOutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jbtnPauseResume.setBackground(new java.awt.Color(96, 95, 93));
        jbtnPauseResume.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jbtnPauseResume.setText("TẠM NGỪNG");
        jbtnPauseResume.setToolTipText("Tạm ngừng tiến trình hiện tại");
        jbtnPauseResume.setBorder(null);
        jbtnPauseResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPauseResumeActionPerformed(evt);
            }
        });
        jLayeredPaneOutput.add(jbtnPauseResume);
        jbtnPauseResume.setBounds(170, 90, 130, 40);

        jbtnStartProcess.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jbtnStartProcess.setText("CHUYỂN ĐỔI");
        jbtnStartProcess.setToolTipText("Các tập tin xuất ra có tên của tập tin đầu vào cộng với kiểu ngày giờ.");
        jbtnStartProcess.setActionCommand("Save");
        jbtnStartProcess.setBorder(null);
        jbtnStartProcess.setVerifyInputWhenFocusTarget(false);
        jbtnStartProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStartProcessActionPerformed(evt);
            }
        });
        jLayeredPaneOutput.add(jbtnStartProcess);
        jbtnStartProcess.setBounds(20, 90, 130, 40);

        jlblOutput.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jlblOutput.setForeground(new java.awt.Color(54, 54, 54));
        jlblOutput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblOutput.setText("<html><u>XUẤT RA</i><html>");
        jLayeredPaneOutput.add(jlblOutput);
        jlblOutput.setBounds(10, 10, 900, 20);

        jbtnStopAndHold.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbtnStopAndHold.setText("<HTML><DIV ALIGN=\"CENTER\">DỪNG TIẾN TRÌNH VÀ GIỮ FILE XUẤT RA</DIV></HTML>");
        jbtnStopAndHold.setToolTipText("Đó là lấy một mảnh của tập tin xuất ra. Sử dụng khi bạn cần một phần của video đó đã được xử lý.");
        jbtnStopAndHold.setBorder(null);
        jbtnStopAndHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStopAndHoldActionPerformed(evt);
            }
        });
        jLayeredPaneOutput.add(jbtnStopAndHold);
        jbtnStopAndHold.setBounds(490, 90, 150, 40);

        jbtnStopAndDelete.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbtnStopAndDelete.setText("<HTML><DIV ALIGN=\"CENTER\">DỪNG TIẾN TRÌNH VÀ XÓA FILE XUẤT RA</DIV></HTML>\n");
        jbtnStopAndDelete.setToolTipText("Dừng tiến trình. Sẽ xóa file xuất ra. Sử dụng khi bạn không cần một phần của video đó đã được xử lý.");
        jbtnStopAndDelete.setBorder(null);
        jbtnStopAndDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnStopAndDeleteActionPerformed(evt);
            }
        });
        jLayeredPaneOutput.add(jbtnStopAndDelete);
        jbtnStopAndDelete.setBounds(320, 90, 150, 40);

        jlblDetails.setBackground(new java.awt.Color(254, 254, 254));
        jlblDetails.setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
        jlblDetails.setForeground(new java.awt.Color(1, 1, 1));
        jlblDetails.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblDetails.setText("Chi tiết xuất ra");
        jlblDetails.setToolTipText("Thông tin tiến trinh");
        jlblDetails.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jlblDetails.setOpaque(true);
        jLayeredPaneOutput.add(jlblDetails);
        jlblDetails.setBounds(10, 150, 880, 40);
        jlblDetails.getAccessibleContext().setAccessibleDescription("Thông tin xử lý");

        jlblOutputFolder.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jlblOutputFolder.setText("THƯ MỤC SAU KHI CHUYỂN ĐỔI :");
        jLayeredPaneOutput.add(jlblOutputFolder);
        jlblOutputFolder.setBounds(20, 40, 170, 40);

        jtxtOutput.setToolTipText("Vị trí chứa thư mục xuất ra");
        jLayeredPaneOutput.add(jtxtOutput);
        jtxtOutput.setBounds(200, 50, 370, 20);

        jbtnOutput.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jbtnOutput.setText("CHỌN THƯ MỤC");
        jbtnOutput.setToolTipText("Tìm nơi chứa thư mục xuất ra");
        jbtnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnOutputActionPerformed(evt);
            }
        });
        jLayeredPaneOutput.add(jbtnOutput);
        jbtnOutput.setBounds(580, 50, 123, 20);

        jMenuBar1.setBackground(new java.awt.Color(234, 235, 236));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(120, 35));
        jMenuBar1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseDragged(evt);
            }
        });
        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuBar1MousePressed(evt);
            }
        });

        jMenuExit.setText("Thoát");
        jMenuExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuExitMousePressed(evt);
            }
        });
        jMenuBar1.add(jMenuExit);

        jMenuAbout.setText("About");
        jMenuAbout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuAboutMousePressed(evt);
            }
        });
        jMenuBar1.add(jMenuAbout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 916, Short.MAX_VALUE)
            .addComponent(jLayeredPaneInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 916, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPaneInput, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jMenuExitMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuExitMousePressed
        if (process == null) {
            WriteToIniFile();
            System.exit(0);
        } else {
            Object[] options = {"Thoát", "Không"};
            int n = JOptionPane.showOptionDialog(this, "Bạn thật sự muốn thoát? Tiến trình đang xử lý, có thể mất dữ liệu.", "Thoát ra", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            if (n == 0) {
                processToDeleteTempFiles();
                if (getOutputFile.exists()) {
                    getOutputFile.delete();
                }
                WriteToIniFile();
                System.exit(0);
            } else {
                return;
            }
        }
}//GEN-LAST:event_jMenuExitMousePressed

    private void jMenuAboutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuAboutMousePressed
        new jfrmAbout().setVisible(true);
}//GEN-LAST:event_jMenuAboutMousePressed

    private void jMenuBar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MousePressed
        xclicked = evt.getX();
        yclicked = evt.getY();
}//GEN-LAST:event_jMenuBar1MousePressed

    private void jMenuBar1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseDragged
        super.setLocation(evt.getXOnScreen() - xclicked, evt.getYOnScreen() - yclicked);
}//GEN-LAST:event_jMenuBar1MouseDragged

    private void jTableFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilesMouseClicked

        /*   if(jTableFiles.getRowCount()>0){
            if(jTableFiles.getSelectedRow()>-1){
                String getFileName=(String) model.getValueAt(jTableFiles.getSelectedRow(), 0);
                if(getFileName.endsWith(".wmv")){
                    if(model.getValueAt(jTableFiles.getSelectedRow(),  jTableFiles.getSelectedColumn()).equals("128")){
                        JOptionPane.showMessageDialog(this, "WMV file don't accept more than 128 audio bitrate.");
                    }
                }
            }
        }*/
    }//GEN-LAST:event_jTableFilesMouseClicked

    private void jTableFilesMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFilesMouseMoved
        Point p = evt.getPoint();
        int rowAtPoint = jTableFiles.rowAtPoint(p);

        if (rowAtPoint != -1) {
            int rowIndex = jTableFiles.convertRowIndexToModel(rowAtPoint);
            jTableFiles.setToolTipText(model.getValueAt(rowIndex, 6).toString());
        }

}//GEN-LAST:event_jTableFilesMouseMoved

    private void jbtnAddFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddFilesActionPerformed
        String[] AudioRates = {"128", "192", "224", "256", "288", "320"};
        String[] frameRates = {"NTSC - 29.97", "PAL - 25"};
        String[] outputFormat = {"AVI (DivX5)", "AVI (XVID)", "DVD (ISO)", "MP4 (H264)", "MP3", "WAV", "AC3", "OGG"};
        JFileChooser fcInput = new JFileChooser();
        fcInput.setCurrentDirectory(getCurrentDir);
        fcInput.setFileFilter(new VideoFileFilter());
        fcInput.setMultiSelectionEnabled(true);
        int status = fcInput.showOpenDialog(null);
        if (status == 0) {
            getCurrentDir = fcInput.getCurrentDirectory();
            getOutputDir = fcInput.getCurrentDirectory();
            if (jRbtnAviDivx5.isSelected()) {
                model.AddFiles(fcInput.getSelectedFiles(), "AVI (DivX5)");
            } else if (jRbtnAviXvid.isSelected()) {
                model.AddFiles(fcInput.getSelectedFiles(), "AVI (XVID)");
            } else if (jRbtnDVD.isSelected()) {
                model.AddFiles(fcInput.getSelectedFiles(), "DVD (ISO)");
            } else if (jRbtnMP4.isSelected()) {
                model.AddFiles(fcInput.getSelectedFiles(), "MP4 (H264)");
            } else if (jRbtnMP3.isSelected()) {
                model.AddFiles(fcInput.getSelectedFiles(), "MP3");
            } else if (jRbtnWAV.isSelected()) {
                model.AddFiles(fcInput.getSelectedFiles(), "WAV");
            } else if (jRbtnAC3.isSelected()) {
                model.AddFiles(fcInput.getSelectedFiles(), "AC3");
            } else {
                model.AddFiles(fcInput.getSelectedFiles(), "OGG");
            }

            TableColumnModel TableColumns = jTableFiles.getColumnModel();
            JComboBox jcbAudioRate = new JComboBox(AudioRates);
            JComboBox jcbFrameRate = new JComboBox(frameRates);
            JComboBox jcbOutputFormat = new JComboBox(outputFormat);
            TableColumns.getColumn(3).setCellEditor(new DefaultCellEditor(jcbAudioRate));
            TableColumns.getColumn(4).setCellEditor(new DefaultCellEditor(jcbFrameRate));
            TableColumns.getColumn(6).setCellEditor(new DefaultCellEditor(jcbOutputFormat));
            //   RefineTable();
            if (jtxtOutput.getText().isEmpty()) {
                jtxtOutput.setText(fcInput.getCurrentDirectory().toString());
            }

        }
}//GEN-LAST:event_jbtnAddFilesActionPerformed


    private void jbtnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoveActionPerformed

        if (jTableFiles.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Bạn cần chọn một File.");
        } else {
            model.removeRow(jTableFiles.getSelectedRow());
        }

}//GEN-LAST:event_jbtnRemoveActionPerformed

    private void jbtnRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoveAllActionPerformed

        if (jTableFiles.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Không có File nào trong bảng.");
        } else {
            model = null;
            model = new FilesTableModel();
            jTableFiles.setModel(model);
            jTableFiles.removeColumn(jTableFiles.getColumnModel().getColumn(6));
            RefineTable();
            model.SetColumnToBlock(columntoblock);
        }

}//GEN-LAST:event_jbtnRemoveAllActionPerformed

    private void jbtnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPlayActionPerformed

        if (jTableFiles.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Bạn cần chọn một File.");
        } else {
            filePlay = new File(model.getValueAt(jTableFiles.getSelectedRow(), 6).toString());
            new FXInSwing(filePlay);
//            SwingUtilities.invokeLater(new Runnable() {
//                @Override
//                public void run() {
//                    new FXInSwing(filePlay);
//                }
//            });
        }

}//GEN-LAST:event_jbtnPlayActionPerformed

    private void jbtnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpActionPerformed

        if (jTableFiles.getRowCount() > 0) {
            if (jTableFiles.getSelectedRow() > 0) {
                model.moveRow(jTableFiles.getSelectedRow(), jTableFiles.getSelectedRow(), jTableFiles.getSelectedRow() - 1);
                jTableFiles.setRowSelectionInterval(jTableFiles.getSelectedRow() - 1, jTableFiles.getSelectedRow() - 1);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bạn không có bất kỳ tập tin nào trong bảng.");
        }

}//GEN-LAST:event_jbtnUpActionPerformed

    private void jbtnPauseResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPauseResumeActionPerformed
        if (process != null) {
            if (pauseresume == false) {
                jbtnPauseResume.setText("TIẾP TỤC");
                StreamError.pauseProcess();
                StreamOutput.pauseProcess();
                model.setValueAt("Tạm ngừng", countTableRow, 8);
            } else {
                jbtnPauseResume.setText("TẠM NGỪNG");
                StreamError.resumeProcess();
                StreamOutput.resumeProcess();
                model.setValueAt("Đang chuyển đổi...", countTableRow, 8);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Hiện tại không có tiến trình nào !");
        }
}//GEN-LAST:event_jbtnPauseResumeActionPerformed

    private void jbtnStartProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStartProcessActionPerformed
        if (jTableFiles.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Làm ơn ! thêm File để chuyển đổi.");
            return;
        }
        if (process == null) {
            jlblDetails.setText("Trạng Thái Tiến Trình:");
            for (int c = 0; c < jTableFiles.getRowCount(); c++) {
                model.setValueAt("Đang chờ", c, 8);
            }
            setEnableComponents(false);
            DecodeVideo();
        } else {
            JOptionPane.showMessageDialog(this, "Làm ơn chờ để tiến trình kết thúc");
        }
}//GEN-LAST:event_jbtnStartProcessActionPerformed

    private void jbtnStopAndHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStopAndHoldActionPerformed
        if (process != null) {
            setEnableComponents(true);
            holdfile = true;
            processToDeleteTempFiles();
            model.setValueAt("Đã Dừng.", countTableRow, 8);
            countTableRow = 0;
        } else {
            JOptionPane.showMessageDialog(this, "Hiện tại không có tiến trình nào !");
        }
}//GEN-LAST:event_jbtnStopAndHoldActionPerformed

    private void jbtnStopAndDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnStopAndDeleteActionPerformed
        if (process != null) {
            setEnableComponents(true);
            holdfile = false;
            processToDeleteTempFiles();
            getOutputFile.delete();//only work on linux.
            model.setValueAt("Đã Dừng.", countTableRow, 8);
            countTableRow = 0;

        } else {
            JOptionPane.showMessageDialog(this, "Hiện tại không có tiến trình nào !");
        }
}//GEN-LAST:event_jbtnStopAndDeleteActionPerformed

    @SuppressWarnings("static-access")
    private void jbtnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnOutputActionPerformed
        JFileChooser fcOutput = new JFileChooser();
        fcOutput.setCurrentDirectory(getOutputDir);
        fcOutput.setFileSelectionMode(fcOutput.DIRECTORIES_ONLY);
        int status = fcOutput.showOpenDialog(null);
        if (status == 0) {
            File file = fcOutput.getSelectedFile();
            getOutputDir = fcOutput.getSelectedFile();
            // getInputFile=file;
            jtxtOutput.setText(file.getPath());
        }
}//GEN-LAST:event_jbtnOutputActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (process == null) {
            WriteToIniFile();
            System.exit(0);
        } else {
            Object[] options = {"Thoát", "Không"};
            int n = JOptionPane.showOptionDialog(this, "Bạn thật sự muốn thoát? Tiến trình đang xử lý, có thể mất dữ liệu.", "Thoát ra", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            if (n == 0) {
                processToDeleteTempFiles();
                if (getOutputFile.exists()) {
                    getOutputFile.delete();
                }
                WriteToIniFile();
                System.exit(0);
            } else {

            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void jCBoxChangeAllOutputFormatStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCBoxChangeAllOutputFormatStateChanged

    }//GEN-LAST:event_jCBoxChangeAllOutputFormatStateChanged

    private void jCBoxChangeAllOutputFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBoxChangeAllOutputFormatActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            if (jRbtnAviDivx5.isSelected()) {
                SetTableOutputFormat("AVI (DivX5)");
            } else if (jRbtnAviXvid.isSelected()) {
                SetTableOutputFormat("AVI (XVID)");
            } else if (jRbtnDVD.isSelected()) {
                SetTableOutputFormat("DVD (ISO)");
            } else if (jRbtnMP4.isSelected()) {
                SetTableOutputFormat("MP4 (H264");
            } else if (jRbtnMP3.isSelected()) {
                SetTableOutputFormat("MP3");
            } else if (jRbtnWAV.isSelected()) {
                SetTableOutputFormat("WAV");
            } else if (jRbtnAC3.isSelected()) {
                SetTableOutputFormat("AC3");
            } else {
                SetTableOutputFormat("OGG");
            }
        }
    }//GEN-LAST:event_jCBoxChangeAllOutputFormatActionPerformed

    private void jRbtnAviDivx5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnAviDivx5ActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("AVI (DivX5)");
        }
    }//GEN-LAST:event_jRbtnAviDivx5ActionPerformed

    private void jRbtnAviXvidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnAviXvidActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("AVI (XVID)");
        }
    }//GEN-LAST:event_jRbtnAviXvidActionPerformed

    private void jRbtnDVDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnDVDActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("DVD (ISO)");
        }
    }//GEN-LAST:event_jRbtnDVDActionPerformed

    private void jRbtnMP4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnMP4ActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("MP4 (H264)");
        }
    }//GEN-LAST:event_jRbtnMP4ActionPerformed

    private void jRbtnMP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnMP3ActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("MP3");
        }
    }//GEN-LAST:event_jRbtnMP3ActionPerformed

    private void jRbtnWAVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnWAVActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("WAV");
        }
    }//GEN-LAST:event_jRbtnWAVActionPerformed

    private void jRbtnAC3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnAC3ActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("AC3");
        }
    }//GEN-LAST:event_jRbtnAC3ActionPerformed

    private void jRbtnOGGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbtnOGGActionPerformed
        if (jCBoxChangeAllOutputFormat.isSelected()) {
            SetTableOutputFormat("OGG");
        }
    }//GEN-LAST:event_jRbtnOGGActionPerformed

    private void jbtnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDownActionPerformed
        // TODO add your handling code here:
        if (jTableFiles.getRowCount() > 0) {
            if (jTableFiles.getSelectedRow() < jTableFiles.getRowCount() - 1 && jTableFiles.getSelectedRow() > -1) {
                model.moveRow(jTableFiles.getSelectedRow(), jTableFiles.getSelectedRow(), jTableFiles.getSelectedRow() + 1);
                jTableFiles.setRowSelectionInterval(jTableFiles.getSelectedRow() + 1, jTableFiles.getSelectedRow() + 1);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bạn không có bất kỳ tập tin nào trong bảng.");
        }

    }//GEN-LAST:event_jbtnDownActionPerformed

    private void SetTableOutputFormat(String outputFormat) {
        if (jTableFiles.getRowCount() > 0) {
            for (int c = 0; c < jTableFiles.getRowCount(); c++) {
                model.setValueAt(outputFormat, c, 7);
            }
        }
    }

    private void setEnableComponents(boolean bol) {
        jbtnAddFiles.setEnabled(bol);
        jbtnRemove.setEnabled(bol);
        jbtnRemoveAll.setEnabled(bol);
        jbtnUp.setEnabled(bol);
        jbtnPlay.setEnabled(bol);
        jtxtOutput.setEnabled(bol);
        jbtnOutput.setEnabled(bol);
        jRbtnAviDivx5.setEnabled(bol);
        jRbtnAviXvid.setEnabled(bol);
        jRbtnDVD.setEnabled(bol);
        jRbtnMP4.setEnabled(bol);
        jRbtnMP3.setEnabled(bol);
        jRbtnWAV.setEnabled(bol);
        jRbtnAC3.setEnabled(bol);
        jRbtnOGG.setEnabled(bol);
        jCBoxChangeAllOutputFormat.setEnabled(bol);
    }

    private void processToDeleteTempFiles() {
        jbtnPauseResume.setText("TẠM NGỪNG");
        pauseresume = false;
        StreamOutput.resumeProcess();
        StreamError.resumeProcess();
        try {
            if (OSName.equals("Windows Vista")) {
                String[] KillMencoderOnVista = new String[]{"taskkill", "/F", "/IM", "mencoder.exe*"};
                Runtime.getRuntime().exec(KillMencoderOnVista);
            } else if (OSName.startsWith("Windows")) {
                Runtime.getRuntime().exec("tskill mencoder");
            }
        } catch (IOException ex) {
        }
        StreamOutput.StopProcess();
        StreamError.StopProcess();
        if (OSName.startsWith("Windows")) {
            try {
                Thread tempThread = new Thread();
                tempThread.sleep(1000);
                tempThread = null;
            } catch (InterruptedException ex) {
            }

        }
        if (OSName.startsWith("Windows")) {
            StartDeleteVideoFiles(0); //Windows version need a timer to delete file properly because sometimes don't delete the file.
        } else if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
            DeleteTempFiles();
        }
    }

    private void RefineTable() {
        jTableFiles.getColumnModel().getColumn(0).setPreferredWidth(125);
        jTableFiles.getColumnModel().getColumn(1).setPreferredWidth(45);
        jTableFiles.getColumnModel().getColumn(2).setPreferredWidth(30);
        jTableFiles.getColumnModel().getColumn(3).setPreferredWidth(30);
        jTableFiles.getColumnModel().getColumn(4).setPreferredWidth(50);
        jTableFiles.getColumnModel().getColumn(6).setPreferredWidth(50);
        jTableFiles.setRowHeight(20);
    }

    private void WriteToIniFile() {
        FileWriter fstream = null;
        try {
            if (OSName.startsWith("Windows")) {
                fstream = new FileWriter(getProgramDir.getAbsolutePath() + "/predefined");
            } else {
                fstream = new FileWriter(getProgramDir.getAbsolutePath() + "/.predefined");
            }
            BufferedWriter out = new BufferedWriter(fstream);
            if (jRbtnAviDivx5.isSelected()) {
                out.write("AVI (DivX5)");
            } else if (jRbtnAviXvid.isSelected()) {
                out.write("AVI (XVID)");
            } else if (jRbtnDVD.isSelected()) {
                out.write("DVD (ISO)");
            } else if (jRbtnMP4.isSelected()) {
                out.write("MP4 (H264)");
            } else if (jRbtnMP3.isSelected()) {
                out.write("MP3");
            } else if (jRbtnWAV.isSelected()) {
                out.write("WAV");
            } else if (jRbtnAC3.isSelected()) {
                out.write("AC3");
            } else {
                out.write("OGG");
            }
            //Close the output stream
            out.close();
            fstream.close();
        } catch (IOException ex) {
        }
    }

    private void ReadFromIniFile() {
        FileReader fsreader = null;
        try {
            if (OSName.startsWith("Windows")) {

                fsreader = new FileReader(getProgramDir.getAbsolutePath() + "/predefined");
            } else {
                fsreader = new FileReader(getProgramDir.getAbsolutePath() + "/.predefined");
            }

            BufferedReader in = new BufferedReader(fsreader);
            String getInFileStr = in.readLine();
            if (getInFileStr.equals("AVI (DvX5)")) {
                jRbtnAviDivx5.setSelected(true);
            } else if (getInFileStr.equals("AVI (XVID)")) {
                jRbtnAviXvid.setSelected(true);
            } else if (getInFileStr.equals("DVD (ISO)")) {
                jRbtnDVD.setSelected(true);
            } else if (getInFileStr.equals("MP4 (H264)")) {
                jRbtnMP4.setSelected(true);
            } else if (getInFileStr.equals("MP3")) {
                jRbtnMP3.setSelected(true);
            } else if (getInFileStr.equals("WAV")) {
                jRbtnWAV.setSelected(true);
            } else if (getInFileStr.equals("AC3")) {
                jRbtnAC3.setSelected(true);
            } else if (getInFileStr.equals("OGG")) {
                jRbtnOGG.setSelected(true);
            } else {
                jRbtnAviDivx5.setSelected(true);
            }
            //Close the output stream
            in.close();
            fsreader.close();
        } catch (IOException ex) {
        }
    }

    private void SetOutputFileLinux() {
        File ReplacedInputFormatFile = new File(ReplaceFormat(model.getValueAt(countTableRow, 6).toString()));
        if ((model.getValueAt(countTableRow, 7).equals("AVI (DivX5)") || model.getValueAt(countTableRow, 7).equals("AVI (XVID)"))) {
            getOutputFile = new File(jtxtOutput.getText() + "/" + ReplacedInputFormatFile.getName() + getStrDateTime + ".avi");
        } else if (model.getValueAt(countTableRow, 7).equals("MP4 (H264)")) {
            getOutputFile = new File(jtxtOutput.getText() + "/" + ReplacedInputFormatFile.getName() + getStrDateTime + ".mp4");
        } else if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
            getOutputFile = new File(jtxtOutput.getText() + "/" + ReplacedInputFormatFile.getName() + getStrDateTime + ".iso");
        } else if (model.getValueAt(countTableRow, 7).equals("MP3")) {
            getOutputFile = new File(jtxtOutput.getText() + "/" + ReplacedInputFormatFile.getName() + getStrDateTime + ".mp3");
        } else if (model.getValueAt(countTableRow, 7).equals("WAV")) {
            getOutputFile = new File(jtxtOutput.getText() + "/" + ReplacedInputFormatFile.getName() + getStrDateTime + ".wav");
        } else if (model.getValueAt(countTableRow, 7).equals("AC3")) {
            getOutputFile = new File(jtxtOutput.getText() + "/" + ReplacedInputFormatFile.getName() + getStrDateTime + ".ac3");
        } else if (model.getValueAt(countTableRow, 7).equals("OGG")) {
            getOutputFile = new File(jtxtOutput.getText() + "/" + ReplacedInputFormatFile.getName() + getStrDateTime + ".ogg");
        }
    }

    private void SetOutputFileWindows() {

        File ReplacedInputFormatFile = new File(ReplaceFormat(model.getValueAt(countTableRow, 6).toString()));
        if ((model.getValueAt(countTableRow, 7).equals("AVI (DivX5)") || model.getValueAt(countTableRow, 7).equals("AVI (XVID)"))) {
            getOutputFile = new File(jtxtOutput.getText() + "\\" + ReplacedInputFormatFile.getName() + getStrDateTime + ".avi");
        } else if (model.getValueAt(countTableRow, 7).equals("MP4 (H264)")) {
            getOutputFile = new File(jtxtOutput.getText() + "\\" + ReplacedInputFormatFile.getName() + getStrDateTime + ".mp4");
        } else if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
            getOutputFile = new File(jtxtOutput.getText() + "\\" + ReplacedInputFormatFile.getName() + getStrDateTime + ".iso");
        } else if (model.getValueAt(countTableRow, 7).equals("MP3")) {
            getOutputFile = new File(jtxtOutput.getText() + "\\" + ReplacedInputFormatFile.getName() + getStrDateTime + ".mp3");
        } else if (model.getValueAt(countTableRow, 7).equals("WAV")) {
            getOutputFile = new File(jtxtOutput.getText() + "\\" + ReplacedInputFormatFile.getName() + getStrDateTime + ".wav");
        } else if (model.getValueAt(countTableRow, 7).equals("AC3")) {
            getOutputFile = new File(jtxtOutput.getText() + "\\" + ReplacedInputFormatFile.getName() + getStrDateTime + ".ac3");
        } else if (model.getValueAt(countTableRow, 7).equals("OGG")) {
            getOutputFile = new File(jtxtOutput.getText() + "\\" + ReplacedInputFormatFile.getName() + getStrDateTime + ".ogg");
        }

    }

    private void DecodeVideo() {
        if (countTableRow < jTableFiles.getRowCount()) {
            if (model.getValueAt(countTableRow, 7).equals("MP3") || model.getValueAt(countTableRow, 7).equals("WAV") || model.getValueAt(countTableRow, 7).equals("AC3") || model.getValueAt(countTableRow, 7).equals("OGG")) {
                getInputFile = new File(model.getValueAt(countTableRow, 6).toString());
                getStrInputFile = getInputFile.getPath();
                if (OSName.startsWith("Windows")) {
                    SetOutputFileWindows();
                } else {
                    SetOutputFileLinux();
                }
                model.setValueAt("Đang chuyển đổi...", countTableRow, 8);
                StreamAudio = new StreamCleanProcessAudio();
                StreamAudio.start();
            } else {
                if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
                    String strdvdfolder;
                    strdvdfolder = jtxtOutput.getText() + "/.DVDOutput";
                    getDVDFolder = new File(strdvdfolder);
                    if (getDVDFolder.exists() == true) {
                        deleteDir(getDVDFolder);
                    }
                }
                getStrDateTime = getDateTime();
                getInputFile = new File(model.getValueAt(countTableRow, 6).toString());
                getStrInputFile = getInputFile.getPath();
                getStrVideoRate = model.getValueAt(countTableRow, 2).toString();
                getStrAudioRate = model.getValueAt(countTableRow, 3).toString();
                getStrFrameRate = model.getValueAt(countTableRow, 4).toString();
                Runtime rt = Runtime.getRuntime();
                try {
                    if (model.getValueAt(countTableRow, 5).equals(true)) {
                        volnormA = "-af";
                        volnormB = "volnorm";
                    } else {
                        volnormA = "-af-adv";
                        volnormB = "force=0";
                    }
                    if (OSName.startsWith("Windows")) {
                        SetOutputFileWindows();
                        process = rt.exec(SetVideoCodecWindows());
                    } else {
                        SetOutputFileLinux();
                        process = rt.exec(SetVideoCodecLinux());
                    }
                    model.setValueAt("Đang chuyển đổi...", countTableRow, 8);
                    StreamOutput = new StreamCleanProcessOutput(process.getInputStream(), "OUTPUT");
                    StreamError = new StreamCleanProcessError(process.getErrorStream(), "ERROR");
                    StreamOutput.start();
                    StreamError.start();
                    if (OSName.startsWith("Windows")) {
                        if (model.getValueAt(countTableRow, 8).equals("DVD (ISO)")) {
                            String hidefile = "C:\\WINDOWS\\System32\\ATTRIB.EXE +H " + "\"" + getMPGFile.getPath() + "\"";
                            try {
                                Runtime.getRuntime().exec(hidefile);
                            } catch (IOException ex) {
                            }
                        }
                    }
                } catch (IOException ex) {
                }
            }
        } else {
            setEnableComponents(true);
            countTableRow = 0;
        }

    }

    private String[] SetVideoCodecLinux() {
        String[] dvdauthorcodec = null, strIso = null, setcodec = null, setvideocodec = null;
        if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {

            getMPGFile = new File(getOutputFile.getParent() + "/.temp.mpg");

        }
        if (getStrFrameRate.equals("NTSC - 29.97")) {
            if (model.getValueAt(countTableRow, 7).equals("AVI (DivX5)")) {
                setcodec = new String[]{"mencoder", getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-ffourcc", "DX50", "-of", "avi", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("AVI (XVID)")) {
                setcodec = new String[]{"mencoder", getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-ffourcc", "XVID", "-of", "avi", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("MP4 (H264)")) {
                setcodec = new String[]{"mencoder", getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
                File WorkingWithFileSpace = new File(getOutputFile.getPath().replace(" ", "\\ "));
                File WorkingWithInputFileSpace = new File(getInputFile.getPath().replace(" ", "\\ "));
                File WorkingWithMPGFileSpace = new File(getMPGFile.getPath().replace(" ", "\\ "));
                String getOutputName = new String(getOutputFile.getName().replace(getStrDateTime + ".iso", ""));
                getOutputName = getOutputName.replace(" ", "\\ ");
                CreateDVDXMLLinux();
                setvideocodec = new String[]{"mencoder", WorkingWithInputFileSpace.getPath(), "-oac", "lavc", "-ovc", "lavc", "-of", "mpeg", "-mpegopts", "format=dvd:tsaf", "-srate", "48000", volnormA, volnormB, "lavcresample=48000", "-lavcopts", "vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=" + getStrVideoRate + ":keyint=18:vstrict=0:acodec=ac3:abitrate=" + getStrAudioRate + ":aspect=16/9", "-ofps", "30000/1001", "-vf", "scale=720:480,harddup", "-o", WorkingWithMPGFileSpace.getPath()};
                dvdauthorcodec = new String[]{"dvdauthor", "-o", "-t", "-x", getXMLFile.getPath().replace(" ", "\\ ")};
                strIso = new String[]{"mkisofs", "-V", getOutputName, "-dvd-video", "-v", "-o", WorkingWithFileSpace.getPath(), getDVDFolder.getPath().replace(" ", "\\ ") + "/"};
                CreateDVDBashLinux(setvideocodec, dvdauthorcodec, strIso);
                setcodec = new String[]{"/bin/sh", getDVDBashFile.getPath()};
            }
        } else {
            if (model.getValueAt(countTableRow, 7).equals("AVI (DivX5)")) {
                setcodec = new String[]{"mencoder", getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "25", "-ffourcc", "DX50", "-of", "avi", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("AVI (XVID)")) {
                setcodec = new String[]{"mencoder", getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "25", "-ffourcc", "XVID", "-of", "avi", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("MP4 (H264)")) {
                setcodec = new String[]{"mencoder", getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "25", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
                File WorkingWithFileSpace = new File(getOutputFile.getPath().replace(" ", "\\ "));
                File WorkingWithInputFileSpace = new File(getInputFile.getPath().replace(" ", "\\ "));
                File WorkingWithMPGFileSpace = new File(getMPGFile.getPath().replace(" ", "\\ "));
                String getOutputName = new String(getOutputFile.getName().replace(getStrDateTime + ".iso", ""));
                getOutputName = getOutputName.replace(" ", "\\ ");
                CreateDVDXMLLinux();
                setvideocodec = new String[]{"mencoder", WorkingWithInputFileSpace.getPath(), "-oac", "lavc", "-ovc", "lavc", "-of", "mpeg", "-mpegopts", "format=dvd:tsaf", "-srate", "48000", volnormA, volnormB, "lavcresample=48000", "-lavcopts", "vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=" + getStrVideoRate + ":keyint=15:vstrict=0:acodec=ac3:abitrate=" + getStrAudioRate + ":aspect=16/9", "-ofps", "25", "-vf", "scale=720:576,harddup", "-o", WorkingWithMPGFileSpace.getPath()};
                dvdauthorcodec = new String[]{"dvdauthor", "-o", "-t", "-x", getXMLFile.getPath().replace(" ", "\\ ")};
                strIso = new String[]{"mkisofs", "-V", getOutputName, "-dvd-video", "-v", "-o", WorkingWithFileSpace.getPath(), getDVDFolder.getPath().replace(" ", "\\ ") + "/"};
                CreateDVDBashLinux(setvideocodec, dvdauthorcodec, strIso);
                setcodec = new String[]{"/bin/sh", getDVDBashFile.getPath()};
            }
        }
        return setcodec;
    }

    private void CreateDVDBashLinux(String[] videocodec, String[] dvdauthorcodec, String[] IsoMaker) {
        String videoc = "", dvdauthor = "", isocreator = "";
        for (int c = 0; c < videocodec.length; c++) {
            videoc = videoc + videocodec[c] + " ";
        }
        for (int c = 0; c < dvdauthorcodec.length; c++) {
            dvdauthor = dvdauthor + dvdauthorcodec[c] + " ";
        }
        for (int c = 0; c < IsoMaker.length; c++) {
            isocreator = isocreator + IsoMaker[c] + " ";
        }
        getDVDBashFile = new File(getOutputFile.getParent() + "/.dvdcreating");
        try {
            FileWriter fstream = new FileWriter(getDVDBashFile);
            BufferedWriter out = new BufferedWriter(fstream);
            out.write("#/bin/sh\n" + videoc + "\n" + dvdauthor + "\n" + isocreator);
            //Close the output stream
            out.close();
        } catch (IOException ex) {
        }
    }

    private void CreateDVDXMLLinux() {
        String firsthour = "", secondhour = "", thirdhour = "", chapters = "";
        for (int c = 0; c <= 60; c = c + 5) {
            if (c <= 10) {
                firsthour = firsthour + "00:0" + c + ":00,";
            } else {
                firsthour = firsthour + "00:" + c + ":00,";
            }
        }
        for (int c = 0; c <= 60; c = c + 5) {
            if (c <= 10) {
                secondhour = secondhour + "01:0" + c + ":00,";
            } else {
                secondhour = secondhour + "01:" + c + ":00,";
            }
        }
        for (int c = 0; c <= 60; c = c + 5) {
            if (c <= 10) {
                secondhour = secondhour + "02:0" + c + ":00,";
            } else {
                secondhour = secondhour + "02:" + c + ":00,";
            }
        }
        chapters = firsthour + secondhour + thirdhour;
        chapters = "'" + chapters.replace("02:60:00,", "02:60:00") + "'";
        getXMLFile = new File(getOutputFile.getParent() + "/.dvdauthor.xml");
        try {
            FileWriter fstream = new FileWriter(getXMLFile.getPath());
            BufferedWriter out = new BufferedWriter(fstream);
            out.write("<dvdauthor dest='" + getDVDFolder.getPath() + "'>\n<vmgm />\n<titleset>\n"
                    + "<titles>\n<pgc>\n<vob file='" + getMPGFile.getPath()
                    + "' chapters=" + chapters + " />\n</pgc>\n</titles>"
                    + "\n</titleset>\n</dvdauthor>");
            //Close the output stream
            out.close();
        } catch (IOException ex) {
        }
    }

    private String[] SetVideoCodecWindows() {
        String[] dvdauthorcodec = null, strIso = null, setcodec = null, setvideocodec = null;
        String getOutputName = "";
        if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
            getMPGFile = new File(getOutputFile.getParent() + "/temp.mpg");

            getOutputName = new String("\"" + getOutputFile.getName().replace(getStrDateTime + ".iso", "") + "\"");
        }
        if (getStrFrameRate.equals("NTSC - 29.97")) {
            if (model.getValueAt(countTableRow, 7).equals("AVI (DivX5)")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-ffourcc", "DX50", "-of", "avi", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("AVI (XVID)")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-ffourcc", "XVID", "-of", "avi", "-o", getOutputFile.getPath()};
                //setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","xvid","-xvidencopts","bitrate="+getStrVideoRate,"-ofps","30000/1001","-of","avi","-o",getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("MP4 (H264)")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};

            } else if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
                //    getMPGFile=new File(getMPGFile.getPath().replace(getMPGFile.getName(), "."+getMPGFile.getName()));

                CreateDVDXMLWindows();
                setvideocodec = new String[]{"\"" + getMencoderFile.getPath() + "\"", "\"" + getInputFile.getPath() + "\"", "-oac", "lavc", "-ovc", "lavc", "-of", "mpeg", "-mpegopts", "format=dvd:tsaf", "-srate", "48000", volnormA, volnormB, "lavcresample=48000", "-lavcopts", "vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=" + getStrVideoRate + ":keyint=18:vstrict=0:acodec=ac3:abitrate=" + getStrAudioRate + ":aspect=16/9", "-ofps", "30000/1001", "-vf", "scale=720:480,harddup", "-o", "\"" + getMPGFile.getPath() + "\""};
                dvdauthorcodec = new String[]{"\"" + getDVDAuthorFile.getPath() + "\"", "-o", "-t", "-x", "\"" + getXMLFile.getPath() + "\""};
                strIso = new String[]{"\"" + getmkisofsFile.getPath() + "\"", "-V", getOutputName, "-dvd-video", "-v", "-o", "\"" + getOutputFile.getPath() + "\"", "\"" + getDVDFolder.getPath() + "/" + "\""};
                CreateDVDBashWindows(setvideocodec, dvdauthorcodec, strIso);
                setcodec = new String[]{getDVDBashFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("MP3")) {
                //setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "mp3lame", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("WAV")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("AC3")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("OGG")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            }
        } else {
            if (model.getValueAt(countTableRow, 7).equals("AVI (DivX5)")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "25", "-ffourcc", "DX50", "-of", "avi", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("AVI (XVID)")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "lavc", "-lavcopts", "vcodec=mpeg4:vbitrate=" + getStrVideoRate, "-ofps", "25", "-ffourcc", "XVID", "-of", "avi", "-o", getOutputFile.getPath()};
                // setcodec = new String[]{getMencoderFile.getPath(),getStrInputFile,"-idx","-oac","mp3lame","-lameopts","cbr:preset="+ getStrAudioRate,"-af","volnorm","-ovc","xvid","-xvidencopts","bitrate="+getStrVideoRate,"-ofps","25","-of","avi","-o",getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("MP4 (H264)")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "25", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
                // getOutputName=getOutputName.replace(" ", "\\ ");
                CreateDVDXMLWindows();
                setvideocodec = new String[]{"\"" + getMencoderFile.getPath() + "\"", "\"" + getInputFile.getPath() + "\"", "-oac", "lavc", "-ovc", "lavc", "-of", "mpeg", "-mpegopts", "format=dvd:tsaf", "-srate", "48000", volnormA, volnormB, "lavcresample=48000", "-lavcopts", "vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=" + getStrVideoRate + ":keyint=15:vstrict=0:acodec=ac3:abitrate=" + getStrAudioRate + ":aspect=16/9", "-ofps", "25", "-vf", "scale=720:576,harddup", "-o", "\"" + getMPGFile.getPath() + "\""};
                dvdauthorcodec = new String[]{"\"" + getDVDAuthorFile.getPath() + "\"", "-o", "-t", "-x", "\"" + getXMLFile.getPath() + "\""};
                strIso = new String[]{"\"" + getmkisofsFile.getPath() + "\"", "-V", getOutputName, "-dvd-video", "-v", "-o", "\"" + getOutputFile.getPath() + "\"", "\"" + getDVDFolder.getPath() + "/" + "\""};
                CreateDVDBashWindows(setvideocodec, dvdauthorcodec, strIso);
                setcodec = new String[]{getDVDBashFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("MP3")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("WAV")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("AC3")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            } else if (model.getValueAt(countTableRow, 7).equals("OGG")) {
                setcodec = new String[]{getMencoderFile.getPath(), getStrInputFile, "-idx", "-oac", "mp3lame", "-lameopts", "cbr:preset=" + getStrAudioRate, volnormA, volnormB, "-ovc", "x264", "-x264encopts", "bitrate=" + getStrVideoRate, "-ofps", "30000/1001", "-o", getOutputFile.getPath()};
            }
        }

        return setcodec;
    }

    private void CreateDVDBashWindows(String[] videocodec, String[] dvdauthorcodec, String[] IsoMaker) {
        String videoc = "", dvdauthor = "", isocreator = "";
        for (int c = 0; c < videocodec.length; c++) {
            videoc = videoc + videocodec[c] + " ";
        }
        for (int c = 0; c < dvdauthorcodec.length; c++) {
            dvdauthor = dvdauthor + dvdauthorcodec[c] + " ";
        }
        for (int c = 0; c < IsoMaker.length; c++) {

            isocreator = isocreator + IsoMaker[c] + " ";
        }
        getDVDBashFile = new File(getOutputFile.getParent() + "/dvdcreating.bat");

        try {
            String hidefile = "C:\\WINDOWS\\System32\\ATTRIB.EXE +H " + "\"" + getDVDBashFile.getPath() + "\"";
            try {
                Runtime.getRuntime().exec(hidefile);
            } catch (IOException ex) {
            }
            FileWriter fstream = new FileWriter(getDVDBashFile);
            BufferedWriter out = new BufferedWriter(fstream);
            out.write(videoc + "\n" + dvdauthor + "\n" + isocreator);
            //Close the output stream
            out.close();

        } catch (IOException ex) {

        }
    }

    private void CreateDVDXMLWindows() {
        String firsthour = "", secondhour = "", thirdhour = "", chapters = "";
        for (int c = 0; c <= 60; c = c + 5) {
            if (c <= 10) {
                firsthour = firsthour + "00:0" + c + ":00,";
            } else {
                firsthour = firsthour + "00:" + c + ":00,";
            }
        }
        for (int c = 0; c <= 60; c = c + 5) {
            if (c <= 10) {
                secondhour = secondhour + "01:0" + c + ":00,";
            } else {
                secondhour = secondhour + "01:" + c + ":00,";
            }
        }
        for (int c = 0; c <= 60; c = c + 5) {
            if (c <= 10) {
                secondhour = secondhour + "02:0" + c + ":00,";
            } else {
                secondhour = secondhour + "02:" + c + ":00,";
            }
        }
        chapters = firsthour + secondhour + thirdhour;
        chapters = "'" + chapters.replace("02:60:00,", "02:60:00") + "'";
        getXMLFile = new File(getOutputFile.getParent() + "/dvdauthor.xml");
        try {
            String hidefile = "C:\\WINDOWS\\System32\\ATTRIB.EXE +H " + "\"" + getXMLFile.getPath() + "\"";
            Runtime.getRuntime().exec(hidefile);
            FileWriter fstream = new FileWriter(getXMLFile.getPath());
            BufferedWriter out = new BufferedWriter(fstream);
            out.write("<dvdauthor dest='" + getDVDFolder.getPath() + "'>\n<vmgm />\n<titleset>\n"
                    + "<titles>\n<pgc>\n<vob file='" + getMPGFile.getPath()
                    + "' chapters=" + chapters + " />\n</pgc>\n</titles>"
                    + "\n</titleset>\n</dvdauthor>");
            //Close the output stream
            out.close();
        } catch (IOException ex) {
        }
    }

    private static boolean deleteDir(File dir) {
        if (dir.isDirectory()) {
            String[] children = dir.list();
            for (int i = 0; i < children.length; i++) {
                boolean success = deleteDir(new File(dir, children[i]));
                if (!success) {
                    return false;
                }
            }
        }
        // The directory is now empty so delete it
        return dir.delete();
    }

    private String getDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("_yyyy_MM_dd_HH.mm.ss");
        Date date = new Date();
        return dateFormat.format(date);
    }

    private String ReplaceFormat(String getFilePath) {
        if (getFilePath.endsWith(".rmvb")) {
            return getFilePath.replace(".rmvb", "");
        } else if (getFilePath.endsWith(".avi")) {
            return getFilePath.replace(".avi", "");
        } else if (getFilePath.endsWith(".mkv")) {
            return getFilePath.replace(".mkv", "");
        } else if (getFilePath.endsWith(".mp4")) {
            return getFilePath.replace(".mp4", "");
        } else if (getFilePath.endsWith(".vob")) {
            return getFilePath.replace(".vob", "");
        } else if (getFilePath.endsWith(".mpeg")) {
            return getFilePath.replace(".mpeg", "");
        } else if (getFilePath.endsWith(".mpg")) {
            return getFilePath.replace(".mpg", "");
        } else if (getFilePath.endsWith(".ogv")) {
            return getFilePath.replace(".ogv", "");
        } else if (getFilePath.endsWith(".wmv")) {
            return getFilePath.replace(".wmv", "");
        } else if (getFilePath.endsWith(".ogg")) {
            return getFilePath.replace(".ogg", "");
        } else if (getFilePath.endsWith(".ogm")) {
            return getFilePath.replace(".ogm", "");
        } else {
            return getFilePath;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    public void StartDeleteVideoFiles(int seconds) {
        timer = new Timer();
        timer.schedule(new DeleteFilesOnWindows(), seconds * 1000);
    }

    public void DeleteTempFiles() {
        // if(process==null){
        if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {
            if (getDVDFolder.exists()) {
                deleteDir(getDVDFolder);
            }
            if (getMPGFile.exists()) {
                getMPGFile.delete();
            }
            if (getDVDBashFile.exists()) {
                getDVDBashFile.delete();
            }
            if (getXMLFile.exists()) {
                getXMLFile.delete();
            }

        }
    }

    class DeleteFilesOnWindows extends TimerTask {

        public void run() {

            if (holdfile == false) {
                getOutputFile.delete();
            }
            DeleteTempFiles();
            timer.cancel(); //Terminate the thread
        }
    }

    class StreamCleanProcessOutput extends Thread {

        InputStream is;
        String type;
        private volatile boolean stop = false;

        StreamCleanProcessOutput(InputStream is, String type) {
            this.is = is;
            this.type = type;
        }

        public void pauseProcess() {
            pauseresume = true;
        }

        public void StopProcess() {
            stop = true;

        }

        public void resumeProcess() {
            pauseresume = false;
            synchronized (process) {

                process.notify();

            }
        }

        @Override
        public void run() {
            try {
                InputStreamReader isr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(isr);
                String line;

                while (!stop && (br.readLine()) != null) {

                    if (pauseresume) {
                        synchronized (process) {
                            try {
                                jlblDetails.setText("Tiến trình đã tạm ngưng.");
                                process.wait();

                            } catch (InterruptedException ex) {
                            }
                        }
                    }
                    jlblDetails.setText("Chi tiết: " + br.readLine());

                }
                if (stop) {
                    jlblDetails.setText("Tiến trình đã dừng lại.");
                    if (process != null) {
                        process.destroy();
                        process = null;
                    }
                    //      System.out.println("Detected stop");
                    return;
                }
                process = null;
                if (stop == false) {
                    if (model.getValueAt(countTableRow, 7).equals("DVD (ISO)")) {

                        jlblDetails.setText("Chi tiết: 'DVD Iso' tiến trình đã hoàn thành.");
                        model.setValueAt("Đã hoàn thành", countTableRow, 8);
                        DeleteTempFiles();
                        countTableRow = countTableRow + 1;
                        DecodeVideo();
                    } else {
                        if (pauseresume == false) {
                            jlblDetails.setText("Chi tiết: Tiến trình đã hoàn thành.");
                            model.setValueAt("Đã hoàn thành", countTableRow, 8);
                            countTableRow = countTableRow + 1;
                            DecodeVideo();
                        }
                    }

                }
            } catch (IOException ex) {
            }
        }
    }

    class StreamCleanProcessError extends Thread {

        InputStream is;
        String type;
        private volatile boolean stop = false;

        StreamCleanProcessError(InputStream is, String type) {
            this.is = is;
            this.type = type;
        }

        public void pauseProcess() {
            pauseresume = true;
        }

        public void StopProcess() {
            stop = true;
            // stopprocess=true;
        }

        public void resumeProcess() {
            pauseresume = false;
            synchronized (process) {
                process.notify();
            }
        }

        @Override
        public void run() {
            try {
                InputStreamReader isr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(isr);
                while (!stop && (br.readLine()) != null) {

                    if (pauseresume) {
                        synchronized (process) {
                            try {
                                jlblDetails.setText("Tiến trình đã tạm ngưng.");
                                process.wait();
                            } catch (InterruptedException ex) {
                            }
                        }
                    }
                }
                if (stop) {
                    jlblDetails.setText("Tiến trình đã dừng lại.");
                    if (process != null) {
                        process.destroy();
                        process = null;
                    }
                    //   System.out.println("Detected stop");
                    return;
                }
            } catch (IOException ex) {
            }
        }
    }

    class StreamCleanProcessAudio extends Thread {

        @Override
        public void run() {
            if (!pauseresume) {
                synchronized (this) {
                    jbtnStartProcess.setEnabled(false);
                    jbtnPauseResume.setEnabled(false);
                    jbtnStopAndDelete.setEnabled(false);
                    jbtnStopAndHold.setEnabled(false);
//                    jMenuBar1.setEnabled(false);
                    jMenuExit.setEnabled(false);

                    jlblDetails.setText("Tiến trình đang chuyển đổi. Xin đừng tắt chương trình !");
                    Encoder encoder = new Encoder();
                    AudioAttributes audio = new AudioAttributes();
                    EncodingAttributes attrs = new EncodingAttributes();

                    if (model.getValueAt(countTableRow, 7).equals("MP3")) {
                        attrs.setFormat("mp3");
                        audio.setCodec("libmp3lame");
                        audio.setBitRate(new Integer(128000));
                        audio.setChannels(new Integer(2));
                        audio.setSamplingRate(new Integer(44100));
                    }
                    if (model.getValueAt(countTableRow, 7).equals("WAV")) {
                        attrs.setFormat("wav");
                        audio.setCodec("wmav2");
                        audio.setBitRate(new Integer(128000));
                        audio.setChannels(new Integer(2));
                        audio.setSamplingRate(new Integer(44100));
                    }
                    if (model.getValueAt(countTableRow, 7).equals("AC3")) {
                        attrs.setFormat("ac3");
                        audio.setCodec("ac3");
                        audio.setBitRate(new Integer(128000));
                        audio.setChannels(new Integer(2));
                        audio.setSamplingRate(new Integer(44100));
                    }
                    if (model.getValueAt(countTableRow, 7).equals("OGG")) {
                        attrs.setFormat("ogg");
                        audio.setCodec("libvorbis");
                        audio.setBitRate(new Integer(128000));
                        audio.setChannels(new Integer(2));
                        audio.setSamplingRate(new Integer(44100));
                    }

                    attrs.setAudioAttributes(audio);
                    try {
                        encoder.encode(getInputFile, getOutputFile, attrs);
                    } catch (IllegalArgumentException ex) {
                        Logger.getLogger(StreamCleanProcessAudio.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (EncoderException ex) {
                        Logger.getLogger(StreamCleanProcessAudio.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    jbtnStartProcess.setEnabled(true);
                    jbtnPauseResume.setEnabled(true);
                    jbtnStopAndDelete.setEnabled(true);
                    jbtnStopAndHold.setEnabled(true);
//                    jMenuBar1.setEnabled(true);
                    jMenuExit.setEnabled(true);

                    jlblDetails.setText("Chi tiết: Tiến trình đã hoàn thành.");
                    model.setValueAt("Đã hoàn thành", countTableRow, 8);
                    countTableRow = countTableRow + 1;
                    DecodeVideo();
                }
            }
        }
    }

    class AVIFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".avi");
        }

        public String getDescription() {
            return "*.avi";
        }
    }

    class MP4Filter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".mp4");
        }

        public String getDescription() {
            return "*.mp4";
        }
    }

    class MP3Filter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".mp3");
        }

        public String getDescription() {
            return "*.mp3";
        }
    }

    class WAVFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".mp3");
        }

        public String getDescription() {
            return "*.mp3";
        }
    }

    class AC3Filter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".mp3");
        }

        public String getDescription() {
            return "*.mp3";
        }
    }

    class OGGFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".mp3");
        }

        public String getDescription() {
            return "*.mp3";
        }
    }

    class DVDFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".iso");
        }

        public String getDescription() {
            return "*.iso";
        }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BGroupOutputFormat;
    private javax.swing.JCheckBox jCBoxChangeAllOutputFormat;
    private javax.swing.JLayeredPane jLayeredPaneInput;
    private javax.swing.JLayeredPane jLayeredPaneOutput;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JRadioButton jRbtnAC3;
    private javax.swing.JRadioButton jRbtnAviDivx5;
    private javax.swing.JRadioButton jRbtnAviXvid;
    private javax.swing.JRadioButton jRbtnDVD;
    private javax.swing.JRadioButton jRbtnMP3;
    private javax.swing.JRadioButton jRbtnMP4;
    private javax.swing.JRadioButton jRbtnOGG;
    private javax.swing.JRadioButton jRbtnWAV;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFiles;
    private javax.swing.JButton jbtnAddFiles;
    private javax.swing.JButton jbtnDown;
    private javax.swing.JButton jbtnOutput;
    private javax.swing.JButton jbtnPauseResume;
    private javax.swing.JButton jbtnPlay;
    private javax.swing.JButton jbtnRemove;
    private javax.swing.JButton jbtnRemoveAll;
    private javax.swing.JButton jbtnStartProcess;
    private javax.swing.JButton jbtnStopAndDelete;
    private javax.swing.JButton jbtnStopAndHold;
    private javax.swing.JButton jbtnUp;
    private javax.swing.JLabel jlblDetails;
    private javax.swing.JLabel jlblInput;
    private javax.swing.JLabel jlblOutput;
    private javax.swing.JLabel jlblOutputFolder;
    private javax.swing.JLabel jlblSetPredefinedOF;
    private javax.swing.JTextField jtxtOutput;
    // End of variables declaration//GEN-END:variables

}
